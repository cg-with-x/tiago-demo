{"version":3,"sources":["multi_game.js"],"names":["cc","Class","extends","Component","properties","chatRoot","Node","labelServerTime","Label","players","default","start","onClickStopGame","roomManager","room","send","JSON","stringify","event","leave","director","loadScene","dataManager","currentTeam","return","onClickTalk","data","parseInt","Math","random","onClickReconnect","reconnect","onRoomMessage","messageStr","message","parse","length","forEach","environment","multiPlayersInfo","renderPlayers","string","renderTalk","removeAllChildren","i","player","openId","label","addComponent","addChild","node","y","info","tip","self","tiago","getUserInfo","isMe","name","isAI","nickName"],"mappings":"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","file":"multi_game.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["import roomManager from './room_manager';\n\nimport utils from './utils';\nimport dataManager from './data_manager';        \n\ncc.Class({\n    extends: cc.Component,      \n\n    properties: {\n        chatRoot: cc.Node,\n        labelServerTime: cc.Label,\n        players: {\n            default: {},\n        },\n    },\n\n    start () {\n\n    },\n\n    onClickStopGame() {\n        roomManager.room.send(JSON.stringify({\n            event: 'bye',\n        }));\n        roomManager.leave();\n        cc.director.loadScene('start');\n\n        // NOTE: 如果之前在一个组队中，则回到队伍\n        if (dataManager.currentTeam) dataManager.currentTeam.return();\n    },\n\n    onClickTalk() {\n        if (roomManager.room) {\n            roomManager.room.send(JSON.stringify({\n                event: 'talk',\n                data: parseInt(Math.random() * 100),\n            }));\n        }\n    },\n\n    onClickReconnect() {\n        if (roomManager.room) {\n            roomManager.room.reconnect();\n        }\n    },\n\n    onRoomMessage(messageStr) {\n        // NOTE: 消息体的内容是开发者自己定义的，这里的代码只是一种示例\n        // NOTE: 开发者可以根据自己的房间脚本和协议，实现自身游戏的逻辑\n        const message = JSON.parse(messageStr);\n\n        if (message.length) {\n            message.forEach(({ event, data }) => {\n                switch (event) {\n                    case 'game-start':\n                        break;\n                    case 'environment':\n                        dataManager.environment = data;\n                        break;\n                    case 'info':\n                        dataManager.multiPlayersInfo = data;\n                        this.renderPlayers();\n                        break;\n                    case 'server-time':\n                        this.labelServerTime.string = `${dataManager.environment}: ${data}`;\n                        break;\n                    case 'talk':\n                        this.renderTalk(data);\n                        break;\n                    case 'game-over':\n                        roomManager.leave();\n                        cc.director.loadScene('start');\n                        // NOTE: 如果之前在一个组队中，则回到队伍\n                        if (dataManager.currentTeam) dataManager.currentTeam.return();\n                        break;\n                    default:\n                        break;\n                }\n            })\n        }\n    },\n\n    renderPlayers() {\n        if (dataManager.multiPlayersInfo) {\n            const players = dataManager.multiPlayersInfo;\n\n            this.chatRoot.removeAllChildren();\n            this.players = [];\n\n            for (let i = 0; i < players.length; i++) {\n                const player = players[i];\n                const openId = player.openId;\n                const label = new cc.Node().addComponent(cc.Label);\n                this.chatRoot.addChild(label.node);\n                label.node.y = -i * 70;\n\n                this.players[openId] = {\n                    openId,\n                    info: player,\n                    label,\n                };\n\n                this.renderTalk({ openId, data: '' });\n            }\n        }\n    },\n\n    renderTalk({ openId, data }) {\n        const tip = `战斗力 +${data}`;\n        const player = this.players[openId];\n        const self = dataManager.tiago.getUserInfo();\n\n        if (player && self) {\n            const isMe = player.openId === self.openId;\n            let name = player.info.isAI ? `AI: ${player.info.nickName}` : player.info.nickName;\n            if (isMe) name = `${name}(我)`;\n            player.label.string = `${name}: ${tip}`;\n        }\n    }\n\n    // update (dt) {},\n});\n"]}