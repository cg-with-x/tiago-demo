(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/laya_pvp_ui/dist/laya_pvp_ui.cjs.development.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'laya_pvp_ui.cjs.development', __filename);'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var pvp_microphone = require('@byted-creative/pvp_microphone');
var live_ui_source = require('@byted-creative/live_ui_source');
var regeneratorRuntime = _interopDefault(require('regenerator-runtime'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class MatchUILaya {
  constructor() {
    this._avartarLayout = [[{
      x: 0,
      y: 0
    }], [{
      x: 150,
      y: 114
    }], [{
      x: 150,
      y: 135
    }, {
      x: 651,
      y: 135
    }], [{
      x: 75,
      y: 156
    }, {
      x: 420,
      y: 156
    }, {
      x: 771,
      y: 156
    }], [{
      x: 51,
      y: 156
    }, {
      x: 297,
      y: 156
    }, {
      x: 543,
      y: 156
    }, {
      x: 789,
      y: 156
    }], [{
      x: 72,
      y: 90
    }, {
      x: 420,
      y: 90
    }, {
      x: 768,
      y: 90
    }, {
      x: 243,
      y: 375
    }, {
      x: 600,
      y: 375
    }], [{
      x: 72,
      y: 90
    }, {
      x: 420,
      y: 90
    }, {
      x: 768,
      y: 90
    }, {
      x: 72,
      y: 375
    }, {
      x: 420,
      y: 375
    }, {
      x: 768,
      y: 375
    }], [{
      x: 51,
      y: 90
    }, {
      x: 297,
      y: 90
    }, {
      x: 543,
      y: 90
    }, {
      x: 795,
      y: 90
    }, {
      x: 177,
      y: 375
    }, {
      x: 426,
      y: 375
    }, {
      x: 675,
      y: 375
    }], [{
      x: 51,
      y: 90
    }, {
      x: 297,
      y: 90
    }, {
      x: 543,
      y: 90
    }, {
      x: 795,
      y: 90
    }, {
      x: 51,
      y: 375
    }, {
      x: 297,
      y: 375
    }, {
      x: 543,
      y: 375
    }, {
      x: 795,
      y: 375
    }], [{
      x: 75,
      y: 90
    }, {
      x: 420,
      y: 90
    }, {
      x: 771,
      y: 90
    }, {
      x: 75,
      y: 375
    }, {
      x: 420,
      y: 375
    }, {
      x: 771,
      y: 375
    }, {
      x: 75,
      y: 660
    }, {
      x: 420,
      y: 660
    }, {
      x: 771,
      y: 660
    }]];
  }

  static get instance() {
    if (MatchUILaya._instance == null) {
      MatchUILaya._instance = new MatchUILaya();

      MatchUILaya._instance._createUI();
    }

    return MatchUILaya._instance;
  }

  _setScale(_node, _scale) {
    _node.scaleX = _scale;
    _node.scaleY = _scale;
  }

  _setLocation(_node, _x, _y) {
    _node.x = this._leftMargin + _x * this._scale;
    _node.y = this._topMargin + _y * this._scale;
  }

  _createUI() {
    // 设计分辨率：指设计图纸分辨率
    const _designWidth = 1125;
    const _designHeight = 2001;
    this._scale = Laya.stage.width / _designWidth < Laya.stage.height / _designHeight ? Laya.stage.width / _designWidth : Laya.stage.height / _designHeight;
    this._leftMargin = (Laya.stage.width - _designWidth * this._scale) / 2;
    this._topMargin = (Laya.stage.height - _designHeight * this._scale) / 2;
    this._dialog = new Laya.Dialog();
    this._bgImg = new Laya.Image(live_ui_source.BACKGROUNDIMG);
    this._headbgImg = new Laya.Image(live_ui_source.AVATARBGMIN);
    this._pointImgs = new Array(5);
    this._leaveBtn = new Laya.Image(live_ui_source.LEAVEBTN);
    this._wait = new Laya.Image(live_ui_source.MATCHIMG);
    this._success = new Laya.Image(live_ui_source.MATCHSUCCESS);
    this._dialog.width = this._bgImg.width = Laya.stage.width;
    this._dialog.height = this._bgImg.height = Laya.stage.height;

    this._dialog.on(Laya.Event.CLICK, this, e => {
      e && e.stopPropagation && e.stopPropagation();
    });

    this._dialog.popupEffect = new Laya.Handler();
    this._dialog.closeEffect = new Laya.Handler();

    this._setScale(this._headbgImg, this._scale);

    this._setScale(this._leaveBtn, this._scale);

    this._setScale(this._wait, this._scale);

    this._setScale(this._success, this._scale);

    this._wait.anchorX = this._success.anchorX = 0.5;
    this._wait.anchorY = this._success.anchorY = 0.5;

    this._setLocation(this._headbgImg, 60, 726);

    this._setLocation(this._leaveBtn, 867, 1749);

    this._setLocation(this._wait, _designWidth / 2, 513);

    this._setLocation(this._success, _designWidth / 2, 513);

    this._closeEvent = () => {
      this.close();
    };

    this._leaveBtn.on(Laya.Event.CLICK, this, this._closeEvent);

    this._masksp = new Laya.Image(live_ui_source.WHITECIRCLE);

    for (let _i = 0; _i < 5; _i++) {
      this._pointImgs[_i] = new Laya.Image(live_ui_source.LITTLECIRCLE);
      this._pointImgs[_i].anchorX = this._pointImgs[_i].anchorY = 0.5;

      this._wait.addChild(this._pointImgs[_i]);

      this._pointImgs[_i].x = 465 + 45 * _i;
      this._pointImgs[_i].y = 615;
    }

    this._dialog.addChild(this._bgImg);

    this._dialog.addChild(this._headbgImg);

    this._dialog.addChild(this._wait);

    this._dialog.addChild(this._success); // this._dialog.addChild(this._leaveBtn);


    const dialogLayer = new Laya.Sprite();
    Laya.stage.addChild(dialogLayer);
    dialogLayer.addChild(Laya.Dialog.manager);
  }

  _updateWaitUI() {
    const _num = this._waittime % 5;

    for (let _i = 0; _i < 5; _i++) {
      if (_i === _num) {
        this._pointImgs[_i].skin = live_ui_source.BIGCIRCLE;
      } else {
        this._pointImgs[_i].skin = live_ui_source.LITTLECIRCLE;
      }
    }
  }

  _updateTime() {
    this._waittime++;

    this._updateWaitUI();
  } // 绘制头像信息


  _updateHeads(_playerNum, _playerInfoList, _ifDrawHeads = false) {
    this._headbgImg.removeChildren();

    this._headbgImg.skin = _playerNum < 5 ? live_ui_source.AVATARBGMIN : _playerNum < 9 ? live_ui_source.AVATARBGMID : live_ui_source.AVATARBGMAX;
    const layout = this._avartarLayout[_playerNum];

    if (!layout) {
      return;
    }

    for (let _i = 0; _i < _playerNum; _i++) {
      const _headGroup = new Laya.Image();

      _headGroup.x = layout[_i].x;
      _headGroup.y = layout[_i].y;

      this._headbgImg.addChild(_headGroup); // 绘制头像


      const _headimg = new Laya.Image();

      _headimg.width = _playerNum < 3 ? 180 : 144;
      _headGroup.width = _headimg.width + (_playerNum < 3 ? 12 : 9) * 2;
      _headimg.height = _playerNum < 3 ? 180 : 144;
      this._masksp.width = _playerNum < 3 ? 180 : 144;
      this._masksp.height = _playerNum < 3 ? 180 : 144;
      _headimg.x = _playerNum < 3 ? 12 : 9;
      _headimg.y = _playerNum < 3 ? 12 : 9;

      if (_i < _playerInfoList.length && _ifDrawHeads || _i === 0) {
        // eslint-disable-next-line no-undef
        const localImage = new window.Image();
        localImage.crossOrigin = 'anonymous';
        localImage.src = _playerInfoList[_i].avatarUrl;

        localImage.onload = () => {
          const scale = localImage.width / _headimg.width;
          const t2d = new Laya.Texture2D(localImage.width / scale, localImage.height / scale, // (Laya as any).TextureFormat.R8G8B8A8
          Laya.Texture2D.FORMAT_R8G8B8A8);

          _headimg.graphics.drawImage(new Laya.Texture(t2d), 0, 0);

          t2d.loadImageSource(localImage);
          _headimg.mask = MatchUILaya.instance._masksp;
        };
      } else {
        _headimg.skin = live_ui_source.DEFAULTAVATAR;
      }

      _headGroup.addChild(_headimg);

      if (_i < _playerInfoList.length && _playerInfoList[_i].isAnchor) {
        const _redcircleimg = new Laya.Image(live_ui_source.REDCIRCLE);

        const _zhibozhongimg = new Laya.Image(live_ui_source.ZHIBOZHONG);

        _redcircleimg.width = _redcircleimg.height = _playerNum < 3 ? 204 : 162;
        _zhibozhongimg.x = _playerNum < 3 ? 45 : 36;
        _zhibozhongimg.y = _playerNum < 3 ? 168 : 132;
        _zhibozhongimg.width = _playerNum < 3 ? 114 : 90.54;
        _zhibozhongimg.height = _playerNum < 3 ? 45 : 35.73;

        _headGroup.addChild(_redcircleimg);

        _headGroup.addChild(_zhibozhongimg);
      }

      const _namelbl = new Laya.Label();

      if (_i < _playerInfoList.length) {
        _namelbl.text = _playerInfoList[_i].nickName;
        _namelbl.alpha = 1.0;
      } else {
        _namelbl.text = '等待玩家';
        _namelbl.alpha = 0.5;
      }

      _namelbl.fontSize = 42;
      _namelbl.color = '#ffffff';
      _namelbl.autoSize = true;

      if (_namelbl.width > _headGroup.width * 1.2) {
        const str = _namelbl.text.toString();

        let i = 1;

        while (true) {
          _namelbl.text = str.slice(0, i);
          _namelbl.text = _namelbl.text + '...';
          i++;
          _namelbl.autoSize = true;

          if (i === str.length || _namelbl.width > _headimg.width * 1.2) {
            break;
          }
        }
      }

      _headGroup.addChild(_namelbl);

      _namelbl.y = _playerNum < 3 ? 225 : 186;
      _namelbl.x = (_headGroup.width - _namelbl.width) / 2;
    }
  }

  show(_playerNum, _userInfo, _debug = false) {
    // 在显示匹配页面时手动关闭连麦
    MicrophoneUILaya.instance.close();
    this._dialog.visible = true;
    Laya.timer.clear(this, this._updateTime);

    this._headbgImg.removeChildren();

    this._setScale(this._wait, this._scale);

    this._success.visible = false;
    this._wait.visible = true;
    this._waittime = 0;
    this._myOpenId = _userInfo.openId;

    this._updateHeads(_playerNum, [_userInfo], true);

    this._dialog.show();

    this._updateWaitUI();

    if (_debug) {
      this._setScale(Laya.Stat, this._scale);

      Laya.Stat.show(0, 0);
      DebugUI.instance.show();
    }

    Laya.timer.loop(300, this, this._updateTime);
  }

  matchSuccess(_playerList) {
    this._closePromise = new Promise(resolve => this._closeResolve = resolve);
    const _playerInfoList = []; // 把我放在第一位

    for (let i = 0; i < _playerList.length; i++) {
      if (_playerList[i].extraInfo.openId === this._myOpenId) {
        _playerInfoList.push(_playerList[i].extraInfo);
      }
    } // 把其他人放在后面


    for (let i = 0; i < _playerList.length; i++) {
      if (_playerList[i].extraInfo.openId !== this._myOpenId) {
        _playerInfoList.push(_playerList[i].extraInfo);
      }
    }

    this._dialog.visible = true;

    this._dialog.show();

    const _playerNum = _playerInfoList.length;
    Laya.timer.clear(this, this._updateTime);

    this._headbgImg.removeChildren();

    this._updateHeads(_playerNum, _playerInfoList, false);

    Laya.Tween.to(this._wait, {
      scaleX: 0.01,
      scaleY: 0.01
    }, 500, Laya.Ease.backOut, Laya.Handler.create(this, () => {
      this._success.visible = false;
      this._success.scaleX = 0.01;
      this._success.scaleY = 0.01;
      this._success.visible = true;
      Laya.Tween.to(this._success, {
        scaleX: this._scale,
        scaleY: this._scale
      }, 500, Laya.Ease.backOut, Laya.Handler.create(this, () => {
        this._headbgImg.removeChildren();

        this._updateHeads(_playerNum, _playerInfoList, true);

        Laya.timer.once(3000, this, this.close);
      }));
    }));
  }

  whenClosed() {
    return this._closePromise;
  }

  setCloseEvent(_event) {
    this._closeEvent = _event;
  }

  close() {
    this._headbgImg.removeChildren();

    Laya.timer.clear(this, this._updateTime);

    this._dialog.close();

    this._dialog.visible = false;

    if (this._closeResolve) {
      this._closeResolve();

      this._closeResolve = null;
    }
  }

}
class DebugUI {
  constructor() {
    this._logString = '';
    this._seen = [];
  }

  static get instance() {
    if (DebugUI._instance == null) {
      DebugUI._instance = new DebugUI();

      DebugUI._instance._createUI();
    }

    return DebugUI._instance;
  }

  _createUI() {
    this._debugbtn = new Laya.Button(undefined, 'vConsole');
    this._debugclr = new Laya.Button(undefined, 'clear');

    this._debugbtn.graphics.drawRect(0, 0, 200, 60, '#00dd00');

    this._debugclr.graphics.drawRect(0, 0, 200, 60, '#00dd00');

    this._debugbtn.labelColors = '#ffffff';
    this._debugclr.labelColors = '#ffffff';
    this._debugpnl = new Laya.Panel();
    this._debuglbl = new Laya.Text();

    this._debugbtn.size(200, 60);

    this._debugclr.size(200, 60);

    this._debugpnl.size(Laya.stage.width, Laya.stage.height);

    this._debuglbl.size(Laya.stage.width, Laya.stage.height - 60);

    Laya.stage.addChild(this._debugbtn);
    Laya.stage.addChild(this._debugpnl);

    this._debugpnl.addChild(this._debuglbl);

    this._debugpnl.addChild(this._debugclr);

    this._debugpnl.x = 0;
    this._debugpnl.y = 0;
    this._debuglbl.x = 0;
    this._debuglbl.y = 0;
    this._debugclr.x = 200;
    this._debugbtn.y = this._debugclr.y = Laya.stage.height - 60;
    this._debugbtn.zOrder = 999999999;
    this._debugpnl.zOrder = 999999998;
    this._debuglbl.bgColor = '#ffffff';
    this._debuglbl.overflow = Laya.Text.SCROLL;
    this._debuglbl.wordWrap = true;
    this._debuglbl.fontSize = 32;
    this._debugbtn.labelSize = 32;
    this._debugclr.labelSize = 32;

    this._debuglbl.on(Laya.Event.MOUSE_DOWN, this, this._startScrollText);

    this._debugbtn.on(Laya.Event.CLICK, this, this._onClickDebug);

    this._debugclr.on(Laya.Event.CLICK, this, this._onClickClear);

    this._debugbtn.visible = false;
    this._debugpnl.visible = false;
  }

  show() {
    this._debugbtn.visible = true;
  }

  log(args) {
    if (this._logString) {
      this._logString += '\n';
    }

    for (let i = 0; i < args.length; i++) {
      if (Array.isArray(args[i])) {
        const param = args[i];

        for (let index = 0; index < param.length; index++) {
          this._logString += typeof param[index] === 'string' ? param[index] : JSON.stringify(param[index], this.replace);
          this._seen = [];
          this._logString += ' ';
        }
      } else {
        this._logString += typeof args[i] === 'string' ? args[i] : JSON.stringify(args[i], this.replace);
        this._seen = [];
        this._logString += ' ';
      }
    }

    if (this._debuglbl) {
      this._debuglbl.text = this._logString;
    }
  }

  replace(...param) {
    const value = param[1];

    if (value != null && typeof value === 'object') {
      if (DebugUI.instance._seen.indexOf(value) >= 0) {
        return;
      }

      DebugUI.instance._seen.push(value);
    }

    return value;
  }

  _onClickDebug() {
    this._debugpnl.visible = !this._debugpnl.visible;

    if (this._debugpnl.visible) {
      Laya.Stat.hide();
    } else {
      Laya.Stat.show();
    }
  }

  _onClickClear() {
    this._logString = '';
    this._debuglbl.text = '';
  }
  /* 开始滚动文本 */


  _startScrollText() {
    this._prevX = this._debuglbl.mouseX;
    this._prevY = this._debuglbl.mouseY;
    Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this._scrollText);
    Laya.stage.on(Laya.Event.MOUSE_UP, this, this._finishScrollText);
  }
  /* 停止滚动文本 */


  _finishScrollText() {
    Laya.stage.off(Laya.Event.MOUSE_MOVE, this, this._scrollText);
    Laya.stage.off(Laya.Event.MOUSE_UP, this, this._finishScrollText);
  }
  /* 鼠标滚动文本 */


  _scrollText() {
    const nowX = this._debuglbl.mouseX;
    const nowY = this._debuglbl.mouseY;
    this._debuglbl.scrollX += this._prevX - nowX;
    this._debuglbl.scrollY += this._prevY - nowY;
    this._prevX = nowX;
    this._prevY = nowY;
  }

}
class MicrophoneUILaya {
  constructor() {
    this._isMyOpen = false;
    this._isOtherOpen = false;
  }

  static get instance() {
    if (MicrophoneUILaya._instance == null) {
      MicrophoneUILaya._instance = new MicrophoneUILaya();

      MicrophoneUILaya._instance._createUI();
    }

    return MicrophoneUILaya._instance;
  }

  _updateUI() {
    if (this._isMyOpen) {
      this._mySprite.skin = live_ui_source.MICMYOPEN;
    } else {
      this._mySprite.skin = live_ui_source.MICMYCLOSE;
    }

    if (this._isOtherOpen) {
      this._otherSprite.skin = live_ui_source.MICOTHEROPEN;
    } else {
      this._otherSprite.skin = live_ui_source.MICOTHERCLOSE;
    }
  }

  _createUI() {
    // 设计分辨率：指设计图纸分辨率
    const _designWidth = 1125;
    const _designHeight = 2001;

    const _scale = Laya.stage.width / _designWidth < Laya.stage.height / _designHeight ? Laya.stage.width / _designWidth : Laya.stage.height / _designHeight;

    this._dialog = new Laya.Scene();
    this._mySprite = new Laya.Image();
    this._otherSprite = new Laya.Image(); // this._dialog.isPopupCenter = false;

    this._dialog.width = 249 * _scale;
    this._dialog.height = 96 * _scale;
    this._dialog.y = 51 * _scale;
    this._dialog.x = Laya.stage.width - this._dialog.width;
    this._mySprite.width = this._mySprite.height = this._otherSprite.width = this._otherSprite.height = 96 * _scale;
    this._otherSprite.right = 33 * _scale;

    this._updateUI(); // this._dialog.popupEffect = new Laya.Handler();
    // this._dialog.closeEffect = new Laya.Handler();


    this._mySprite.on(Laya.Event.CLICK, this, this.clickMyChat);

    this._otherSprite.on(Laya.Event.CLICK, this, this.clickOtherChat);

    this._dialog.addChild(this._mySprite);

    this._dialog.addChild(this._otherSprite);

    this._dialog.visible = false;
    Laya.stage.addChild(this._dialog);
    this._dialog.zOrder = 999999999;
  }

  show(config) {
    return __awaiter(this, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (regeneratorRuntime) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", false);

          case 2:
            _context.prev = 2;
            _context.next = 5;
            return pvp_microphone.PVPMicrophone.init({
              openID: config.openID,
              roomNum: config.roomNum,
              appID: config.appID,
              source: config.source
            });

          case 5:
            _context.next = 12;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](2);
            console.error('init error', _context.t0);
            this.close();
            return _context.abrupt("return");

          case 12:
            console.log('init success');
            console.log(pvp_microphone.PVPMicrophone.getDebugInfo());
            _context.prev = 14;
            _context.next = 17;
            return pvp_microphone.PVPMicrophone.startChat();

          case 17:
            _context.next = 24;
            break;

          case 19:
            _context.prev = 19;
            _context.t1 = _context["catch"](14);
            console.error('start chat error', _context.t1);
            this.close();
            return _context.abrupt("return", false);

          case 24:
            console.log('startChat success');
            this._isMyOpen = pvp_microphone.PVPMicrophone.getAudioStatus().local;
            this._isOtherOpen = pvp_microphone.PVPMicrophone.getAudioStatus().remote;

            this._updateUI(); // this._dialog.show();


            this._dialog.visible = true;
            this._dialog.active = true;

          case 30:
          case "end":
            return _context.stop();
        }
      }, _callee, this, [[2, 7], [14, 19]]);
    }));
  }

  close() {
    if (this._dialog) {
      console.log('close laya microphone ui');
      pvp_microphone.PVPMicrophone.endChat();
      this._dialog.visible = false;
      this._dialog.active = false;
    } // this._dialog.close();

  }

  clickMyChat() {
    if (this._isMyOpen) {
      pvp_microphone.PVPMicrophone.disableLocalAudio().then(() => {
        this._isMyOpen = false;

        this._updateUI();

        console.log('disableLocalAudio success');
      }).catch(error => {
        console.error('disableLocalAudio error', error);
      });
    } else {
      pvp_microphone.PVPMicrophone.enableLocalAudio().then(() => {
        this._isMyOpen = true;

        this._updateUI();

        console.log('enableLocalAudio success');
      }).catch(error => {
        console.error('enableLocalAudio error', error);
      });
    }
  }

  clickOtherChat() {
    if (this._isOtherOpen) {
      pvp_microphone.PVPMicrophone.muteAllRemoteAudioStream().then(() => {
        this._isOtherOpen = false;

        this._updateUI();

        console.log('muteAllRemoteAudioStream success');
      }).catch(error => {
        console.error('muteAllRemoteAudioStream error', error);
      });
    } else {
      pvp_microphone.PVPMicrophone.unmuteAllRemoteAudioStream().then(() => {
        this._isOtherOpen = true;

        this._updateUI();

        console.log('unmuteAllRemoteAudioStream success');
      }).catch(error => {
        console.error('unmuteAllRemoteAudioStream error', error);
      });
    }
  }

}

exports.DebugUI = DebugUI;
exports.MatchUILaya = MatchUILaya;
exports.MicrophoneUILaya = MicrophoneUILaya;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        