(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/pvp-client/build/team/team.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'team', __filename);"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var eventemitter3_1 = __importDefault(require("eventemitter3"));
var reqManager_1 = __importDefault(require("../common/reqManager"));
var common_1 = require("../common");
var startTeamMatch_1 = require("../match/startTeamMatch");
var Utils_1 = require("../common/Utils");
var log = function (res) {
};
var REQ_CMD;
(function (REQ_CMD) {
    REQ_CMD[REQ_CMD["DISMISS_TEAM"] = 1] = "DISMISS_TEAM";
    REQ_CMD[REQ_CMD["KICKOUT_PLAYER"] = 2] = "KICKOUT_PLAYER";
    REQ_CMD[REQ_CMD["SET_PLAYER_INFO"] = 3] = "SET_PLAYER_INFO";
    REQ_CMD[REQ_CMD["SET_TEAM_CONFIG"] = 4] = "SET_TEAM_CONFIG";
    REQ_CMD[REQ_CMD["MSG_TO_CLIENT"] = 101] = "MSG_TO_CLIENT";
    REQ_CMD[REQ_CMD["BROADCAST"] = 102] = "BROADCAST";
    REQ_CMD[REQ_CMD["START_MATCH"] = 201] = "START_MATCH";
    REQ_CMD[REQ_CMD["MATCH_SUCCESS"] = 202] = "MATCH_SUCCESS";
    REQ_CMD[REQ_CMD["MATCH_CANCELLED"] = 203] = "MATCH_CANCELLED";
    REQ_CMD[REQ_CMD["GET_TEAM_INFO"] = 301] = "GET_TEAM_INFO";
})(REQ_CMD || (REQ_CMD = {}));
var ACK_CMD;
(function (ACK_CMD) {
    ACK_CMD[ACK_CMD["ACK"] = 1] = "ACK";
    ACK_CMD[ACK_CMD["MSG"] = 2] = "MSG";
    ACK_CMD[ACK_CMD["NOTIFY"] = 3] = "NOTIFY";
})(ACK_CMD || (ACK_CMD = {}));
var EVENT_ID;
(function (EVENT_ID) {
    EVENT_ID[EVENT_ID["PLAYER_JOIN_TEAM"] = 1] = "PLAYER_JOIN_TEAM";
    EVENT_ID[EVENT_ID["PLAYER_LEAVE_TEAM"] = 2] = "PLAYER_LEAVE_TEAM";
    EVENT_ID[EVENT_ID["TEAM_DISMISS"] = 3] = "TEAM_DISMISS";
    EVENT_ID[EVENT_ID["SELF_ENTER"] = 4] = "SELF_ENTER";
    EVENT_ID[EVENT_ID["MATCH_START"] = 201] = "MATCH_START";
    EVENT_ID[EVENT_ID["MATCH_SUCCESS"] = 202] = "MATCH_SUCCESS";
    EVENT_ID[EVENT_ID["MATCH_CANCELLED"] = 203] = "MATCH_CANCELLED";
    EVENT_ID[EVENT_ID["MATCH_ERROR"] = 204] = "MATCH_ERROR";
    EVENT_ID[EVENT_ID["UPDATE_TEAM_INFO"] = 301] = "UPDATE_TEAM_INFO";
})(EVENT_ID || (EVENT_ID = {}));
var Team = (function (_super) {
    __extends(Team, _super);
    function Team(config) {
        var _this = _super.call(this) || this;
        var appId = config.appId, appTag = config.appTag, session = config.session, roomNum = config.teamNum, maxNumber = config.maxNumber;
        _this.selfID = "";
        _this.players = new Map();
        _this.playerMap = new Map();
        _this.playerList = [];
        _this._config = config;
        _this._isConnected = false;
        _this._handleTeamServerRes = _this._handleTeamServerRes.bind(_this);
        _this._handleTeamPVPRes = _this._handleTeamPVPRes.bind(_this);
        _this._reqManager = new reqManager_1.default();
        _this._isCreate = roomNum === undefined;
        _this._playerEnterSet = new Set();
        Utils_1.getTeamConnectionConfig({
            appId: appId,
            appTag: appTag,
            session: session,
            roomNum: roomNum,
            maxNumber: maxNumber,
        })
            .then(function (connectionConfig) {
            _this._socket = common_1.connectSocket(connectionConfig);
            _this._socket.onMessage(function (res) {
                _this._handleTeamPVPRes(res.data);
            });
            _this._socket.onMessage(function (res) {
                _this._handleTeamServerRes(res.data);
            });
            _this._socket.onError(function (err) {
                _this.emit("error", { code: err.code, message: err.message });
                _this._socket.close();
            });
            _this._socket.onClose(function () { return (_this._isConnected = false); });
        })
            .catch(function (e) {
            _this.emit("error", { code: e.code, message: e.message });
        });
        return _this;
    }
    Team.prototype.leaveTeam = function () {
        log("Method team.destroy");
        this._socket.close();
        this.removeAllListeners();
    };
    Team.prototype.getTeamMatchTask = function () {
        return this._matchTask;
    };
    Team.prototype.startMatch = function (conf) {
        log("Method startMatch");
        var matchId = conf.matchId, score = conf.score;
        this._matchTask = startTeamMatch_1.startTeamMatch({ matchId: matchId, score: score, socket: this._socket });
        return this._matchTask;
    };
    Team.prototype.dissolve = function () {
        var _this = this;
        log("Method dissolve");
        return new Promise(function (resolve, reject) {
            _this._socket.send({
                data: _this._reqManager.reqMaker(REQ_CMD.DISMISS_TEAM, {}, function (status) {
                    if (status.code === 0) {
                        resolve();
                    }
                    else {
                        reject(new Error("error: code: " + status.code + ",\nmessage: " + status.message));
                    }
                }),
            });
        });
    };
    Team.prototype.kickoutPlayer = function (conf) {
        var _this = this;
        log("Method kickOutPlayer");
        return new Promise(function (resolve, reject) {
            var playerId = conf.playerId;
            _this._socket.send({
                data: _this._reqManager.reqMaker(REQ_CMD.KICKOUT_PLAYER, { playerid: playerId }, function (status) {
                    if (status.code === 0) {
                        resolve();
                    }
                    else {
                        reject(new Error("error: code: " + status.code + ",\nmessage: " + status.message));
                    }
                }),
            });
        });
    };
    Team.prototype.setPlayerInfo = function (conf) {
        var _this = this;
        log("Method setPlayerInfo");
        return new Promise(function (resolve, reject) {
            var extraInfo = conf.extraInfo, score = conf.score;
            _this._socket.send({
                data: _this._reqManager.reqMaker(REQ_CMD.SET_PLAYER_INFO, { extrainfo: extraInfo, score: score }, function (status) {
                    if (status.code === 0) {
                        resolve();
                    }
                    else {
                        reject(new Error("error: code: " + status.code + ",\nmessage: " + status.message));
                    }
                }),
            });
        });
    };
    Team.prototype.setPlayerReady = function (conf) {
        var _this = this;
        log("Method setPlayerReady");
        return new Promise(function (resolve, reject) {
            var isReady = conf.isReady;
            _this._socket.send({
                data: _this._reqManager.reqMaker(REQ_CMD.SET_PLAYER_INFO, { isready: isReady }, function (status) {
                    if (status.code === 0) {
                        resolve();
                    }
                    else {
                        reject(new Error("error: code: " + status.code + ",\nmessage: " + status.message));
                    }
                }),
            });
        });
    };
    Team.prototype.setTeamConfig = function (conf) {
        var _this = this;
        log("Method setTeamConfig");
        return new Promise(function (resolve, reject) {
            var maxNumber = conf.maxNumber;
            _this._socket.send({
                data: _this._reqManager.reqMaker(REQ_CMD.SET_TEAM_CONFIG, {
                    config: {
                        maxnumber: maxNumber,
                    },
                }, function (status) {
                    if (status.code === 0) {
                        resolve();
                    }
                    else {
                        reject(new Error("error: code: " + status.code + ",\nmessage: " + status.message));
                    }
                }),
            });
        });
    };
    Team.prototype.sendToPlayer = function (conf) {
        var _this = this;
        log("Method sendToPlayer");
        return new Promise(function (resolve, reject) {
            var playerId = conf.playerId, message = conf.message;
            _this._socket.send({
                data: _this._reqManager.reqMaker(REQ_CMD.MSG_TO_CLIENT, { playerid: playerId, msg: message }, function (status) {
                    if (status.code === 0) {
                        resolve();
                    }
                    else {
                        reject(new Error("error: code: " + status.code + ",\nmessage: " + status.message));
                    }
                }),
            });
        });
    };
    Team.prototype.broadcastToPlayers = function (conf) {
        var _this = this;
        log("Method broadcastToPlayers");
        return new Promise(function (resolve, reject) {
            var message = conf.message;
            _this._socket.send({
                data: _this._reqManager.reqMaker(REQ_CMD.BROADCAST, { msg: message }, function (status) {
                    if (status.code === 0) {
                        resolve();
                    }
                    else {
                        reject(new Error("error: code: " + status.code + ",\nmessage: " + status.message));
                    }
                }),
            });
        });
    };
    Team.prototype._handleTeamServerRes = function (res) {
        var _this = this;
        if (this._isConnected) {
            return;
        }
        log("Inner: handleTeamServerRes " + res);
        var parsedRes = JSON.parse(res);
        var errno = parsedRes.errno, data = parsedRes.data;
        log("Inner: res : " + errno + ", data : " + JSON.stringify(data));
        if (typeof errno !== "undefined") {
            if (errno === 0) {
                log("Inner: join success");
                this._isConnected = true;
                var _a = this._config, extraInfo = _a.extraInfo, score = _a.score;
                this.setPlayerInfo({ extraInfo: extraInfo, score: score }).catch(function (err) {
                    _this.emit("error", { code: err.code, message: err.message });
                });
                if (this._isCreate) {
                    this.emit("create", { teamNum: data.room_num });
                }
                else {
                    this._matchTask = startTeamMatch_1.genTeamMatchTask({ socket: this._socket });
                    this.emit("join", undefined);
                }
            }
            else {
                log("Inner: join fail");
                this.emit("error", { code: 2, message: "join team fail" });
            }
        }
        else {
            log("Inner: join error unknown res");
        }
    };
    Team.prototype._handleTeamPVPRes = function (res) {
        var _this = this;
        if (!this._isConnected) {
            return;
        }
        var parsedRes = JSON.parse(res);
        log("Inner handleTeamPVPRes " + res);
        var cmd = parsedRes.cmd, data = parsedRes.data;
        switch (cmd) {
            case ACK_CMD.ACK: {
                this._reqManager.ackHandler(data);
                if (this._matchTask) {
                    this._matchTask.handleMatchRes(res, this.selfID);
                }
                break;
            }
            case ACK_CMD.MSG: {
                this.emit(data.msgtype === 1 ? "message" : "broadcast", {
                    msg: data.msg,
                    fromId: data.fromid,
                });
                break;
            }
            case ACK_CMD.NOTIFY: {
                switch (data.eventid) {
                    case EVENT_ID.PLAYER_JOIN_TEAM: {
                        var playerInfo = data.data.playerinfo;
                        this.players.set(playerInfo.playerid, {
                            playerId: playerInfo.playerid,
                            isMaster: playerInfo.ismaster,
                            isOnline: playerInfo.isonline,
                            isReady: playerInfo.isready,
                            extraInfo: playerInfo.extrainfo,
                        });
                        this.playerMap.set(playerInfo.playerid, {
                            playerId: playerInfo.playerid,
                            isMaster: playerInfo.ismaster,
                            isOnline: playerInfo.isonline,
                            isReady: playerInfo.isready,
                            extraInfo: playerInfo.extrainfo,
                        });
                        this.playerList.push({
                            playerId: playerInfo.playerid,
                            isMaster: playerInfo.ismaster,
                            isOnline: playerInfo.isonline,
                            isReady: playerInfo.isready,
                            extraInfo: playerInfo.extrainfo,
                        });
                        this._playerEnterSet.add(playerInfo.playerid);
                        break;
                    }
                    case EVENT_ID.PLAYER_LEAVE_TEAM: {
                        this.emit("player_exit", {
                            playerId: data.data.playerid,
                            isForced: data.data.isforced,
                        });
                        if (this.players.has(data.data.playerid)) {
                            this.players.delete(data.data.playerid);
                            this.playerMap.delete(data.data.playerid);
                        }
                        var idx = this.playerList.findIndex(function (player) {
                            return player.playerId === data.data.playerid;
                        });
                        if (idx > -1) {
                            this.playerList.splice(idx, 1);
                        }
                        break;
                    }
                    case EVENT_ID.TEAM_DISMISS: {
                        this.emit("dissolve", undefined);
                        break;
                    }
                    case EVENT_ID.SELF_ENTER: {
                        this.selfID = data.data.playerid;
                        break;
                    }
                    case EVENT_ID.MATCH_START:
                    case EVENT_ID.MATCH_CANCELLED:
                    case EVENT_ID.MATCH_SUCCESS:
                    case EVENT_ID.MATCH_ERROR: {
                        if (this._matchTask) {
                            this._matchTask.handleMatchRes(res, this.selfID);
                        }
                        break;
                    }
                    case EVENT_ID.UPDATE_TEAM_INFO: {
                        var teamInfo_1 = __assign({}, data.data);
                        teamInfo_1.playerList = [];
                        teamInfo_1.playerMap = new Map();
                        teamInfo_1.players.forEach(function (player) {
                            var playerId = player.playerid;
                            _this.players.set(playerId, {
                                playerId: player.playerid,
                                isMaster: player.ismaster,
                                isOnline: player.isonline,
                                isReady: player.isready,
                                extraInfo: player.extrainfo,
                            });
                            teamInfo_1.playerList.push({
                                playerId: player.playerid,
                                isMaster: player.ismaster,
                                isOnline: player.isonline,
                                isReady: player.isready,
                                extraInfo: player.extrainfo,
                            });
                            _this.playerMap.set(playerId, {
                                playerId: player.playerid,
                                isMaster: player.ismaster,
                                isOnline: player.isonline,
                                isReady: player.isready,
                                extraInfo: player.extrainfo,
                            });
                            teamInfo_1.playerMap.set(playerId, {
                                playerId: player.playerid,
                                isMaster: player.ismaster,
                                isOnline: player.isonline,
                                isReady: player.isready,
                                extraInfo: player.extrainfo,
                            });
                            var idx = _this.playerList.findIndex(function (player) {
                                return player.playerId === playerId;
                            });
                            if (idx > -1) {
                                _this.playerList[idx] = {
                                    playerId: player.playerid,
                                    isMaster: player.ismaster,
                                    isOnline: player.isonline,
                                    isReady: player.isready,
                                    extraInfo: player.extrainfo,
                                };
                            }
                            else {
                                _this.playerList.push({
                                    playerId: player.playerid,
                                    isMaster: player.ismaster,
                                    isOnline: player.isonline,
                                    isReady: player.isready,
                                    extraInfo: player.extrainfo,
                                });
                            }
                            if (_this._playerEnterSet.has(playerId)) {
                                _this.emit("player_enter", {
                                    playerId: playerId,
                                });
                                _this._playerEnterSet.delete(playerId);
                            }
                        });
                        this.emit("update_team_info", { teamInfo: teamInfo_1 });
                        break;
                    }
                    default:
                        this.emit("error", {
                            code: 15,
                            message: "Inner: handleTeamPVPRes error, notify unknown eventid " + data.eventid,
                        });
                }
                break;
            }
            default:
                this.emit("error", {
                    code: 15,
                    message: "Inner: handleTeamPVPRes error, unknown message type " + cmd,
                });
                break;
        }
    };
    return Team;
}(eventemitter3_1.default));
exports.Team = Team;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        