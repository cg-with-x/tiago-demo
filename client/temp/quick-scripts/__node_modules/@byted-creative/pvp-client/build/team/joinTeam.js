(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/pvp-client/build/team/joinTeam.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'joinTeam', __filename);"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var userConfig_1 = require("../common/userConfig");
var _1 = require(".");
var pvpError_1 = require("../common/pvpError");
var errorCode_1 = require("../common/errorCode");
function joinTeam(param) {
    if (!userConfig_1.userConfig.appId) {
        throw new pvpError_1.PVPError(errorCode_1.ERROR_CODE.MISSING_PARAM, "missing appId, " + errorCode_1.remindMissingConfigWord);
    }
    return new _1.Team(__assign({ appId: userConfig_1.userConfig.appId, appTag: userConfig_1.userConfig.appTag, session: userConfig_1.userConfig.session }, param));
}
exports.joinTeam = joinTeam;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        