(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/pvp-client/build/game_room/room.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'room', __filename);"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var eventemitter3_1 = require("eventemitter3");
var common_1 = require("../common");
var notifyRoom_1 = require("./notifyRoom");
var Utils_1 = require("../common/Utils");
var pingPongManager_1 = __importDefault(require("./pingPongManager"));
var log = function (res) {
};
var Room = (function (_super) {
    __extends(Room, _super);
    function Room(roomConfig) {
        var _this = _super.call(this) || this;
        _this._isFirstMessage = true;
        _this._isSecondMessage = false;
        _this._autoReconnect = false;
        _this._tests = [];
        _this._openHandler = function () {
            _this._isFirstMessage = true;
        };
        _this._messageHandler = function (param) { return __awaiter(_this, void 0, void 0, function () {
            var message, openMessage, initMessage, outputMessage, officialMessage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log("message " + param.data);
                        message = param.data;
                        if (this._isFirstMessage) {
                            openMessage = JSON.parse(message);
                            if (openMessage.code === 0) {
                                this._pingPongManager.startPingPong();
                                this.emit("open", undefined);
                            }
                            else {
                                this.emit("error", {
                                    code: openMessage.code,
                                    message: openMessage.data,
                                });
                            }
                            this._isFirstMessage = false;
                            this._isSecondMessage = true;
                            return [2];
                        }
                        if (this._isSecondMessage) {
                            initMessage = void 0;
                            try {
                                initMessage = JSON.parse(message);
                            }
                            catch (e) { }
                            this._isSecondMessage = false;
                            if (initMessage &&
                                initMessage.data &&
                                initMessage.data.type === "NotifyRoom") {
                                this.notifyRoom = new notifyRoom_1.NotifyRoom(initMessage.data, this);
                                this.emit("notifyRoomPrepared", undefined);
                                return [2];
                            }
                        }
                        outputMessage = message;
                        if (!(typeof Blob !== "undefined" && message instanceof Blob)) return [3, 2];
                        if (!(this._config.incomeMessageType &&
                            this._config.incomeMessageType === "string")) return [3, 2];
                        return [4, new Promise(function (resolve) {
                                var fileReader = new FileReader();
                                fileReader.onload = function (event) {
                                    if (event.target) {
                                        resolve(fileReader.result);
                                    }
                                };
                                fileReader.readAsArrayBuffer(message);
                            })];
                    case 1:
                        outputMessage = _a.sent();
                        _a.label = 2;
                    case 2:
                        try {
                            officialMessage = JSON.parse(message);
                        }
                        catch (e) { }
                        if (officialMessage && officialMessage.data) {
                            this._pingPongManager.pong(officialMessage.data.timestamp);
                        }
                        else {
                            this.emit("message", { message: outputMessage });
                        }
                        return [2];
                }
            });
        }); };
        _this._closeHandler = function () {
            _this._pingPongManager.clear();
            _this.emit("close", undefined);
            if (_this._autoReconnect) {
                setTimeout(function () {
                    _this.reconnect();
                }, 500);
            }
        };
        _this._errorHandler = function (error) {
            _this.emit("error", {
                code: error.code,
                message: error.message,
                errMsg: error.errMsg,
            });
            if (_this._autoReconnect) {
                setTimeout(function () {
                    _this.reconnect();
                }, 500);
            }
        };
        _this._config = roomConfig;
        _this._pingPongManager = new pingPongManager_1.default(10, 1000, function (pingTimestamp) {
            _this.send(JSON.stringify({
                cmd: "ping",
                type: "official",
                data: { timestamp: pingTimestamp },
            }));
        });
        Utils_1.getGameRoomUrl(roomConfig)
            .then(function (url) {
            log(url);
            _this._socket = common_1.connectSocket({ url: url, headers: {}, protocols: [] });
            _this._socket.onMessage(_this._messageHandler);
            _this._socket.onOpen(_this._openHandler);
            _this._socket.onClose(_this._closeHandler);
            _this._socket.onError(_this._errorHandler);
        })
            .catch(function (err) {
            _this._errorHandler({
                code: err.code,
                message: err.message,
                errMsg: err.errMsg,
            });
        });
        return _this;
    }
    Room.prototype.send = function (message) {
        if (this._socket) {
            this._socket.send({ data: message });
        }
    };
    Room.prototype.close = function () {
        if (this._socket) {
            this._socket.close({ code: 0, reason: "closed" });
        }
    };
    Room.prototype.setAutoReconnect = function (autoReconnect) {
        this._autoReconnect = autoReconnect;
    };
    Room.prototype.reconnect = function () {
        var _this = this;
        this.emit("reconnecting", undefined);
        Utils_1.getGameRoomUrl(this._config)
            .then(function (url) {
            log(url);
            _this._socket = common_1.connectSocket({ url: url, headers: {}, protocols: [] });
            _this._socket.onMessage(_this._messageHandler);
            _this._socket.onOpen(_this._openHandler);
            _this._socket.onClose(_this._closeHandler);
            _this._socket.onError(_this._errorHandler);
        })
            .catch(function (err) {
            _this._errorHandler({
                code: err.code,
                message: err.message,
                errMsg: err.message,
            });
        });
    };
    Room.prototype.getRoomDelay = function () {
        return this._pingPongManager.getAvHalfDuration();
    };
    Room.prototype.startPingPong = function () {
        this._pingPongManager.startPingPong();
    };
    Room.prototype.pausePingPong = function () {
        this._pingPongManager.pausePingPong();
    };
    return Room;
}(eventemitter3_1.EventEmitter));
exports.Room = Room;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        