(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/pvp-client/build/game_room/notifyRoom.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'notifyRoom', __filename);"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var eventemitter3_1 = require("eventemitter3");
var pvpError_1 = require("../common/pvpError");
var NotifyRoom = (function (_super) {
    __extends(NotifyRoom, _super);
    function NotifyRoom(_a, room) {
        var user = _a.user, clients = _a.clients;
        var _this = _super.call(this) || this;
        _this._messageHandler = function (_a) {
            var message = _a.message;
            if (typeof message !== "string")
                return;
            var _b = JSON.parse(message), cmd = _b.cmd, data = _b.data;
            switch (cmd) {
                case "notifyFromUser":
                    var _c = data, fromClient = _c.fromClient, message_1 = _c.message;
                    _this.emit("messageFromClient", {
                        message: message_1,
                        fromClient: fromClient,
                    });
                    break;
                case "userJoined":
                    var joinedClient = data.client;
                    _this.clients.push(joinedClient);
                    _this.clientList.push(joinedClient);
                    _this.emit("userJoined", { client: joinedClient });
                    break;
                case "userLeaved":
                    var leavedClient_1 = data.client;
                    var leaveIdx = _this.clients.findIndex(function (client) { return client.id === leavedClient_1.id; });
                    if (leaveIdx >= 0) {
                        _this.clients.splice(leaveIdx, 1);
                        _this.clientList.splice(leaveIdx, 1);
                    }
                    _this.emit("userLeaved", { client: leavedClient_1 });
                    break;
                case "userInfoUpdate":
                    var updateClient_1 = data.client;
                    var updateIdx = _this.clients.findIndex(function (client) { return client.id === updateClient_1.id; });
                    if (updateIdx >= 0) {
                        _this.clients[updateIdx] = updateClient_1;
                        _this.clientList[updateIdx] = updateClient_1;
                    }
                    _this.emit("userInfoUpdate", { client: updateClient_1 });
                    break;
                default:
                    throw new pvpError_1.PVPError(5, "Internal Error, unknown type: " + cmd);
            }
        };
        _this.clients = clients;
        _this.clientList = clients;
        _this._room = room;
        _this.me = user;
        var idx = _this.clients.findIndex(function (client) {
            return client.id === _this.me.id;
        });
        if (idx > -1) {
            _this.clients.splice(idx, 1);
            _this.clientList.splice(idx, 1);
        }
        _this._room.on("open", function () {
            _this.emit("open", undefined);
        });
        _this._room.on("close", function () {
            _this.emit("close", undefined);
        });
        _this._room.on("error", function (param) {
            _this.emit("error", param);
        });
        _this._room.on("message", _this._messageHandler);
        return _this;
    }
    NotifyRoom.prototype.sendToClient = function (client, message) {
        var formatStr = this._formatSendParam("notifyToUser", {
            message: message,
            toClient: client,
        });
        this._room.send(formatStr);
    };
    NotifyRoom.prototype.broadcast = function (message) {
        var formatStr = this._formatSendParam("broadcast", {
            message: message,
        });
        this._room.send(formatStr);
    };
    NotifyRoom.prototype.setPlayerInfo = function (info) {
        var formatStr = this._formatSendParam("setUserInfo", {
            info: info,
        });
        this._room.send(formatStr);
    };
    NotifyRoom.prototype.close = function () {
        this._room.close();
    };
    NotifyRoom.prototype._formatSendParam = function (cmd, data) {
        return JSON.stringify({
            cmd: cmd,
            data: data,
        });
    };
    return NotifyRoom;
}(eventemitter3_1.EventEmitter));
exports.NotifyRoom = NotifyRoom;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        