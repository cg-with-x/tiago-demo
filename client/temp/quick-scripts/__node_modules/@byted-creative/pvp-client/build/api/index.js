(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/pvp-client/build/api/index.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'index', __filename);"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var userConfig_1 = require("../common/userConfig");
var Utils_1 = require("../common/Utils");
var match_1 = require("../match");
var Team = __importStar(require("../team"));
var Room = __importStar(require("../game_room"));
var log = function (res) {
};
function setAppID(appId) {
    userConfig_1.userConfig.appId = appId;
}
exports.setAppID = setAppID;
function setAID(aId) {
    userConfig_1.userConfig.aId = aId;
}
exports.setAID = setAID;
function setPlatformID(platformId) {
    userConfig_1.userConfig.platformId = platformId;
}
exports.setPlatformID = setPlatformID;
function setExtraInfo(extraInfo) {
    userConfig_1.userConfig.extra = extraInfo;
}
exports.setExtraInfo = setExtraInfo;
function setUrlForPlatform(urlForPlatform) {
    userConfig_1.userConfig.urlForPlatform = urlForPlatform;
}
exports.setUrlForPlatform = setUrlForPlatform;
function setEnvironment(environment) {
    userConfig_1.userConfig.environment = environment;
    Utils_1.updateServerBaseUrl();
}
exports.setEnvironment = setEnvironment;
function setRegion(region) {
    userConfig_1.userConfig.region = region;
    Utils_1.updateServerBaseUrl();
}
exports.setRegion = setRegion;
function initConfig(_a) {
    var appId = _a.appId, aId = _a.aId, platformId = _a.platformId, extraInfo = _a.extraInfo, region = _a.region, environment = _a.environment, urlForPlatform = _a.urlForPlatform;
    setAppID(appId);
    setAID(aId);
    setPlatformID(platformId);
    if (extraInfo !== undefined) {
        setExtraInfo(extraInfo);
    }
    if (region)
        setRegion(region);
    if (environment)
        setEnvironment(environment);
    Utils_1.updateServerBaseUrl();
    if (urlForPlatform) {
        setUrlForPlatform(urlForPlatform);
    }
}
exports.initConfig = initConfig;
function login() {
    return __awaiter(this, void 0, void 0, function () {
        var loginRes, innerSession, res, resJSON, sessionRes;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.warn("【接口即将废弃】PVPClient.login接口即将废弃，请开发者移步PVPClient.setExtraInfo，设置自己的用户信息");
                    log("[login] start");
                    if (!(typeof tt === "undefined")) return [3, 3];
                    innerSession = localStorage.getItem("__innerSession__");
                    if (innerSession) {
                        userConfig_1.userConfig.session = innerSession;
                        return [2];
                    }
                    return [4, window.fetch("https://developer.toutiao.com/api/apps/login?appid=" + userConfig_1.userConfig.appId + "&uid=" + Math.floor(100000 * Math.random()), {
                            method: "GET",
                            mode: "cors",
                        })];
                case 1:
                    res = _a.sent();
                    return [4, res.json()];
                case 2:
                    resJSON = _a.sent();
                    loginRes = resJSON.data;
                    return [3, 5];
                case 3: return [4, new Promise(function (resolve, reject) {
                        tt.login({
                            force: false,
                            success: function (data) {
                                resolve(data);
                            },
                            fail: function (e) {
                                reject(e);
                            },
                        });
                    })];
                case 4:
                    loginRes = _a.sent();
                    _a.label = 5;
                case 5:
                    if (!userConfig_1.userConfig.appId) return [3, 7];
                    return [4, Utils_1.getSession(userConfig_1.userConfig.appId, loginRes.anonymousCode, loginRes.code)];
                case 6:
                    sessionRes = _a.sent();
                    _a.label = 7;
                case 7:
                    if (sessionRes) {
                        log("Method login: get session from server success, session " + sessionRes);
                        userConfig_1.userConfig.session = sessionRes;
                    }
                    return [2];
            }
        });
    });
}
exports.login = login;
function startMatch(conf) {
    if (conf.extraInfo) {
        console.warn("【参数即将废弃】extraInfo接口即将废弃，与initConfig合并，请开发者使用initConfig中的extraInfo，设置自己的匹配额外信息");
    }
    if (conf.urlForPlatform) {
        console.warn("【参数即将废弃】urlForPlatform接口即将废弃，与initConfig合并，请开发者使用initConfig中的urlForPlatform");
    }
    if (conf.playerMatchInfo) {
        console.warn("【参数即将废弃】playerMatchInfo接口即将废弃，与initConfig合并，请开发者使用initConfig中的extraInfo");
    }
    return match_1.startSingleMatch({
        matchId: conf.matchId,
        score: conf.score,
        playerMatchInfo: __assign(__assign(__assign({}, conf.playerMatchInfo), conf.extraInfo), userConfig_1.userConfig.extra),
        urlForPlatform: __assign(__assign({}, conf.urlForPlatform), userConfig_1.userConfig.urlForPlatform),
        disableAutoRetry: conf.disableAutoRetry,
    });
}
exports.startMatch = startMatch;
function createTeam(conf) {
    return Team.createTeam({
        maxNumber: conf.maxNumber,
        score: conf.score,
        extraInfo: __assign({}, userConfig_1.userConfig.extra),
    });
}
exports.createTeam = createTeam;
function joinTeam(conf) {
    return Team.joinTeam({
        teamNum: conf.teamNum,
        score: conf.score,
        extraInfo: __assign({}, userConfig_1.userConfig.extra),
    });
}
exports.joinTeam = joinTeam;
function joinGameRoom(roomConfig) {
    return Room.joinGameRoom(roomConfig);
}
exports.joinGameRoom = joinGameRoom;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        