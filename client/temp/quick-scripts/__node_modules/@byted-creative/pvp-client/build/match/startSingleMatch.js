(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/pvp-client/build/match/startSingleMatch.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'startSingleMatch', __filename);"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
var userConfig_1 = require("../common/userConfig");
var pvpError_1 = require("../common/pvpError");
var errorCode_1 = require("../common/errorCode");
function startSingleMatch(conf) {
    var matchId = conf.matchId, score = conf.score, playerMatchInfo = conf.playerMatchInfo, urlForPlatform = conf.urlForPlatform, disableAutoRetry = conf.disableAutoRetry;
    if (!userConfig_1.userConfig.appId) {
        throw new pvpError_1.PVPError(errorCode_1.ERROR_CODE.MISSING_PARAM, "missing appId, " + errorCode_1.remindMissingConfigWord);
    }
    return new _1.MatchTask({
        appId: userConfig_1.userConfig.appId,
        appTag: userConfig_1.userConfig.appTag,
        session: userConfig_1.userConfig.session,
        matchId: matchId,
        score: score,
        playerMatchInfo: playerMatchInfo,
        urlForPlatform: urlForPlatform,
        disableAutoRetry: disableAutoRetry,
    });
}
exports.startSingleMatch = startSingleMatch;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        