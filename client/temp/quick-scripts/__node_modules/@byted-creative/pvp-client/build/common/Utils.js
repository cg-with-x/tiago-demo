(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/pvp-client/build/common/Utils.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'Utils', __filename);"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var userConfig_1 = require("./userConfig");
var pvpError_1 = require("./pvpError");
var ttAdapter_1 = require("./ttAdapter");
var errorCode_1 = require("./errorCode");
var roomApiPath = {
    getGameRoomTicket: "/get_game_room_ticket",
    getTeamRoomTicket: "/get_team_room_ticket",
};
exports.cnNCServerBaseUrl = {
    session: "https://gate.snssdk.com/session_api/login/",
    match: "wss://microgames.bytedance.com/match/",
    gameRoom: "wss://microgames.bytedance.com/room/ws",
    teamRoom: "wss://microgames.bytedance.com/team/ws",
    roomApi: "https://microgames.bytedance.com/team_room_api",
};
exports.sgServerBaseUrl = {
    session: "https://microgames-sg.bytedance.com/session_api/login/",
    match: "wss://microgames-sg.bytedance.com/match/",
    gameRoom: "wss://microgames-sg.bytedance.com/room/ws",
    teamRoom: "wss://microgames-sg.bytedance.com/team/ws",
    roomApi: "https://microgames-sg.bytedance.com/team_room_api",
};
var serverCurrentUrls = __assign({}, exports.cnNCServerBaseUrl);
exports.boeServerBaseUrl = {
    gameRoom: "ws://10.227.12.19:2334/room/ws",
    roomApi: "http://10.227.12.19:7788/team_room_api",
    teamRoom: "ws://10.224.22.147:2334/team/ws",
    match: "ws://10.224.8.129:9001/match/",
};
exports.testServerBaseUrl = {
    gameRoom: "wss://microgames-test.bytedance.com/room/ws",
    roomApi: "https://microgames-test.bytedance.com/team_room_api",
    teamRoom: "wss://10.224.22.147:2334/team/ws",
    match: "wss://microgames-test.bytedance.com/match/",
};
exports.sgTestServerBaseUrl = {
    gameRoom: "wss://microgames-sg-test.bytedance.com/room/ws",
    roomApi: "https://microgames-sg-test.bytedance.com/team_room_api",
    teamRoom: "wss://10.224.22.147:2334/team/ws",
    match: "wss://microgames-sg-test.bytedance.com/match/",
};
exports.qs = {
    parse: function (query) {
        if (query === void 0) { query = ""; }
        var result = {};
        query
            .replace(/^\?/, "")
            .split("&")
            .forEach(function (kv) {
            var _a = __read(kv.split("="), 2), k = _a[0], v = _a[1];
            result[k] = decodeURIComponent(v);
        });
        return result;
    },
    stringify: function (obj, trim) {
        if (obj === void 0) { obj = {}; }
        if (trim === void 0) { trim = false; }
        return Object.keys(obj)
            .filter(function (k) { return !trim || obj[k]; })
            .map(function (k) { return k + "=" + encodeURIComponent(String(obj[k] || "")); })
            .join("&");
    },
};
function getSession(appid, anonymousCode, code) {
    return __awaiter(this, void 0, void 0, function () {
        var queryStr, url_1, res, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queryStr = exports.qs.stringify({
                        appid: appid,
                        anonymous_code: anonymousCode,
                        code: code,
                    });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 7, , 8]);
                    url_1 = serverCurrentUrls.session + "?" + queryStr;
                    res = void 0;
                    if (!(typeof tt === "undefined")) return [3, 4];
                    return [4, fetch(url_1)];
                case 2:
                    res = _a.sent();
                    return [4, res.json()];
                case 3:
                    res = _a.sent();
                    res = { data: res };
                    return [3, 6];
                case 4: return [4, new Promise(function (resolve, reject) {
                        tt.request({
                            url: url_1,
                            data: {},
                            success: function (data) {
                                resolve(data);
                            },
                            fail: function (e) {
                                reject(e);
                            },
                        });
                    })];
                case 5:
                    res = _a.sent();
                    _a.label = 6;
                case 6: return [2, res.data.data.session];
                case 7:
                    err_1 = _a.sent();
                    throw new pvpError_1.PVPError(2, "missing session");
                case 8: return [2];
            }
        });
    });
}
exports.getSession = getSession;
function setServerBaseUrl(config) {
    serverCurrentUrls = __assign(__assign({}, exports.cnNCServerBaseUrl), config);
    return serverCurrentUrls;
}
exports.setServerBaseUrl = setServerBaseUrl;
function updateServerBaseUrl() {
    var baseUrl = exports.cnNCServerBaseUrl;
    switch (userConfig_1.userConfig.region) {
        case "cn-nc":
            baseUrl = exports.cnNCServerBaseUrl;
            switch (userConfig_1.userConfig.environment) {
                case "online":
                    break;
                case "test":
                    baseUrl = __assign(__assign({}, baseUrl), exports.testServerBaseUrl);
                    break;
                case undefined:
                    break;
                default:
                    console.error("unknown region: " + userConfig_1.userConfig.region + ", please check");
            }
            break;
        case "sg":
            baseUrl = exports.sgServerBaseUrl;
            switch (userConfig_1.userConfig.environment) {
                case "online":
                    break;
                case "test":
                    baseUrl = __assign(__assign({}, baseUrl), exports.sgTestServerBaseUrl);
                    break;
                case undefined:
                    break;
                default:
                    console.error("unknown region: " + userConfig_1.userConfig.region + ", please check");
            }
            break;
        case undefined:
            baseUrl = exports.cnNCServerBaseUrl;
            switch (userConfig_1.userConfig.environment) {
                case "online":
                    break;
                case "test":
                    baseUrl = __assign(__assign({}, baseUrl), exports.testServerBaseUrl);
                    break;
                case undefined:
                    break;
                default:
                    console.error("unknown region: " + userConfig_1.userConfig.region + ", please check");
            }
            break;
        default:
            console.error("unknown environment: " + userConfig_1.userConfig.environment + ", please check");
    }
    setServerBaseUrl(baseUrl);
}
exports.updateServerBaseUrl = updateServerBaseUrl;
function getServerCurrentUrls() {
    return serverCurrentUrls;
}
exports.getServerCurrentUrls = getServerCurrentUrls;
function getTeamRoomTicket(roomNumber) {
    return __awaiter(this, void 0, void 0, function () {
        var getTicketParam, url, res, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!userConfig_1.userConfig.appId) {
                        throw new pvpError_1.PVPError(3, "missing appId");
                    }
                    getTicketParam = {
                        appID: userConfig_1.userConfig.appId,
                        roomNumber: roomNumber,
                    };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    url = serverCurrentUrls.roomApi + roomApiPath.getTeamRoomTicket;
                    return [4, ttAdapter_1.ttAdapter.request({
                            url: url,
                            method: "POST",
                            data: getTicketParam,
                        })];
                case 2:
                    res = _a.sent();
                    if (res.data.status.code !== 0) {
                        throw new pvpError_1.PVPError(res.data.status.code, res.data.status.message);
                    }
                    return [2, res.data.ticket];
                case 3:
                    err_2 = _a.sent();
                    throw new pvpError_1.PVPError(errorCode_1.ERROR_CODE.CONNECTION_FAIL, "connection to server fail, please check your network");
                case 4: return [2];
            }
        });
    });
}
exports.getTeamRoomTicket = getTeamRoomTicket;
function getGameRoomTicket(roomNumber) {
    return __awaiter(this, void 0, void 0, function () {
        var getTicketParam, url, res, err_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!userConfig_1.userConfig.appId) {
                        throw new pvpError_1.PVPError(errorCode_1.ERROR_CODE.MISSING_PARAM, "missing appId, " + errorCode_1.remindMissingConfigWord);
                    }
                    getTicketParam = {
                        appID: userConfig_1.userConfig.appId,
                        roomNumber: roomNumber,
                    };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    url = serverCurrentUrls.roomApi + roomApiPath.getGameRoomTicket;
                    return [4, ttAdapter_1.ttAdapter.request({
                            url: url,
                            method: "POST",
                            data: getTicketParam,
                        })];
                case 2:
                    res = _a.sent();
                    if (res.data.status.code !== 0) {
                        throw new pvpError_1.PVPError(res.data.status.code, res.data.status.message);
                    }
                    return [2, res.data.ticket];
                case 3:
                    err_3 = _a.sent();
                    if (err_3.code === 40001) {
                        throw err_3;
                    }
                    else {
                        throw new pvpError_1.PVPError(errorCode_1.ERROR_CODE.CONNECTION_FAIL, "connection to server fail, please check your network");
                    }
                    return [3, 4];
                case 4: return [2];
            }
        });
    });
}
exports.getGameRoomTicket = getGameRoomTicket;
function getGameRoomUrl(param) {
    return __awaiter(this, void 0, void 0, function () {
        var roomNum, extra, serverPosStr, _a, gtoken, ticket, extraStr, url;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    roomNum = param.roomNum;
                    extra = userConfig_1.userConfig.extra;
                    return [4, getGameRoomTicket(roomNum)];
                case 1:
                    serverPosStr = _b.sent();
                    _a = __read(serverPosStr.split(":"), 2), gtoken = _a[0], ticket = _a[1];
                    extraStr = encodeURIComponent(JSON.stringify(extra));
                    url = serverCurrentUrls.gameRoom + "?appid=" + userConfig_1.userConfig.appId + "&aid=" + (userConfig_1.userConfig.aId || "") + "&platformid=" + (userConfig_1.userConfig.platformId ||
                        "") + "&apptag=default&ticket=" + ticket + "&gtoken=" + gtoken + "&extra=" + extraStr + "&session=" + (userConfig_1.userConfig.session ||
                        "");
                    return [2, url];
            }
        });
    });
}
exports.getGameRoomUrl = getGameRoomUrl;
function getMatchConnectionConfig(config) {
    var appId = config.appId, appTag = config.appTag, session = config.session;
    var extra = userConfig_1.userConfig.extra;
    var extraStr = encodeURIComponent(JSON.stringify(extra || {}));
    var url = serverCurrentUrls.match + "?appid=" + appId + "&aid=" + (userConfig_1.userConfig.aId ||
        "") + "&platformid=" + (userConfig_1.userConfig.platformId ||
        "") + "&apptag=" + appTag + "&extra=" + extraStr + "&session=" + (session || "");
    return {
        url: url,
        headers: {},
        protocols: [],
    };
}
exports.getMatchConnectionConfig = getMatchConnectionConfig;
function getTeamConnectionConfig(config) {
    return __awaiter(this, void 0, void 0, function () {
        var appId, appTag, session, roomNum, maxNumber, extra, ticket, url, _a, gToken, roomId, roomidCreateTime, tmpExtra;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    appId = config.appId, appTag = config.appTag, session = config.session, roomNum = config.roomNum, maxNumber = config.maxNumber;
                    extra = userConfig_1.userConfig.extra;
                    if (!roomNum) return [3, 2];
                    return [4, getTeamRoomTicket(roomNum)];
                case 1:
                    ticket = _b.sent();
                    _b.label = 2;
                case 2:
                    url = serverCurrentUrls.teamRoom + "?appid=" + appId + "&aid=" + (userConfig_1.userConfig.aId ||
                        "") + "&platformid=" + (userConfig_1.userConfig.platformId ||
                        "") + "&apptag=" + appTag + "&session=" + (session || "");
                    if (roomNum) {
                        if (ticket) {
                            _a = __read(ticket.split(","), 3), gToken = _a[0], roomId = _a[1], roomidCreateTime = _a[2];
                            url += "&message_type=joinTeam&gtoken=" + gToken + "&room_id=" + roomId + "&room_secret=" + roomidCreateTime + "&extra=" + JSON.stringify(extra || {});
                        }
                        else {
                            throw new pvpError_1.PVPError(1, "team not exist");
                        }
                    }
                    else {
                        tmpExtra = extra || {};
                        tmpExtra.capacity = maxNumber || 1;
                        url += "&message_type=createTeamRoom&extra=" + JSON.stringify(tmpExtra);
                    }
                    return [2, {
                            url: encodeURI(url),
                            headers: {},
                            protocols: [],
                        }];
            }
        });
    });
}
exports.getTeamConnectionConfig = getTeamConnectionConfig;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        