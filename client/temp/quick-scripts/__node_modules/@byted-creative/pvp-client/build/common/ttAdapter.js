(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/pvp-client/build/common/ttAdapter.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'ttAdapter', __filename);"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTT = typeof tt !== "undefined";
exports.placeholder = undefined;
var Deferred = (function () {
    function Deferred() {
        var _this = this;
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    return Deferred;
}());
exports.Deferred = Deferred;
function isFunction(arg) {
    return typeof arg === "function";
}
function getBlobFromURI(uri) {
    return fetch(window.__fileMap[uri] || uri).then(function (res) { return res.blob(); });
}
function getArrayBufferFromURI(uri) {
    return fetch(window.__fileMap[uri] || uri).then(function (res) {
        return res.arrayBuffer();
    });
}
exports.qs = {
    parse: function (query) {
        if (query === void 0) { query = ""; }
        var result = {};
        query
            .replace(/^\?/, "")
            .split("&")
            .forEach(function (kv) {
            var _a = __read(kv.split("="), 2), k = _a[0], v = _a[1];
            result[k] = decodeURIComponent(v);
        });
        return result;
    },
    stringify: function (obj, trim) {
        if (obj === void 0) { obj = {}; }
        if (trim === void 0) { trim = false; }
        return Object.keys(obj)
            .filter(function (k) { return !trim || obj[k]; })
            .map(function (k) { return k + "=" + encodeURIComponent(String(obj[k] || "")); })
            .join("&");
    },
};
function safeCall() {
    var funcs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        funcs[_i] = arguments[_i];
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        funcs.forEach(function (func) {
            if (isFunction(func)) {
                func.apply(undefined, args);
            }
        });
    };
}
function stringify(data) {
    if (typeof data === "string") {
        return data;
    }
    if (data instanceof ArrayBuffer) {
        return data;
    }
    return JSON.stringify(data);
}
exports.stringify = stringify;
function promisify(func) {
    return function (config) {
        return new Promise(function (resolve, reject) {
            var _config = __assign(__assign({}, config), { success: function (data) {
                    if (config) {
                        safeCall(config.success)(data);
                    }
                    resolve(data);
                },
                fail: function (err) {
                    if (config) {
                        safeCall(config.fail)(err);
                    }
                    reject(err);
                },
                complete: function (arg) {
                    if (config) {
                        safeCall(config.complete)(arg);
                    }
                } });
            func(_config);
        });
    };
}
exports.promisify = promisify;
exports.ttAdapter = {
    get env() {
        if (exports.isTT) {
            return tt.env;
        }
        return {
            USER_DATA_PATH: "__USER_DATA_PATH__",
        };
    },
    getStorageSync: function (key) {
        if (exports.isTT) {
            return tt.getStorageSync(key);
        }
        else {
            return localStorage.getItem(key);
        }
    },
    setStorageSync: function (key, value) {
        if (exports.isTT) {
            tt.setStorageSync(key, value);
        }
        else {
            localStorage.setItem(key, value);
        }
    },
    setStorageAsync: function (key, data) {
        if (exports.isTT) {
            return new Promise(function (resolve, reject) {
                tt.setStorage({
                    key: key,
                    data: data,
                    success: resolve,
                    fail: reject,
                });
            });
        }
        else {
            localStorage.setItem(key, data);
            var noop = function () { return Promise.resolve(); };
            return noop();
        }
    },
    removeStorageSync: function (key) {
        if (exports.isTT) {
            tt.removeStorageSync({ key: key });
        }
        else {
            localStorage.removeItem(key);
        }
    },
    createRewardedVideoAd: function (param) {
        if (exports.isTT && tt.createRewardedVideoAd) {
            return tt.createRewardedVideoAd(param);
        }
        var offFunc = function (f) { };
        var onFunc = function (f) { return f(); };
        var noop = function () { return Promise.resolve(); };
        return {
            show: noop,
            load: noop,
            onLoad: onFunc,
            offLoad: offFunc,
            onError: onFunc,
            offError: offFunc,
            onClose: function (f) { return f({ isEnded: true }); },
            offClose: offFunc,
        };
    },
    showToast: function (param) {
        if (exports.isTT) {
            return tt.showToast(param);
        }
        console.warn(param);
    },
    getGameRecorderManager: function () {
        if (exports.isTT) {
            return tt.getGameRecorderManager();
        }
        return {
            start: function (params) {
                if (params === void 0) { params = { duration: 10 }; }
            },
            pause: function () {
            },
            recordClip: function () {
            },
            clipVideo: function () {
            },
            resume: function () {
            },
            stop: function () {
            },
            onStart: function (handler) {
            },
            onResume: function (handler) {
            },
            onPause: function (handler) {
            },
            onStop: function (handler) {
            },
            onError: function (handler) {
            },
            onInterruptionBegin: function (handler) {
            },
            onInterruptionEnd: function (handler) {
            },
        };
    },
    getSystemInfoSync: function () {
        if (exports.isTT) {
            return tt.getSystemInfoSync();
        }
        return {
            SDKVersion: "1.6.3.1",
            appName: "devtools",
            battery: 100,
            batteryLevel: 100,
            benchmarkLevel: 1,
            brand: "devtools",
            devicePixelRatio: 2,
            errMsg: "getSystemInfoSync:ok",
            fontSizeSetting: 16,
            language: "zh_CN",
            model: "iPhone 6",
            pixelRatio: 2,
            platform: "devtools",
            screenHeight: 667,
            screenWidth: 375,
            statusBarHeight: 20,
            system: "iOS 10.0.1",
            version: "6.6.3",
            wifiSignal: 4,
            windowHeight: 667,
            windowWidth: 375,
        };
    },
    login: function (config) {
        if (exports.isTT) {
            return promisify(tt.login)(config);
        }
        return Promise.resolve({
            code: 1,
            anonymousCode: 1,
        });
    },
    getUserInfo: function (config) {
        if (config === void 0) { config = {}; }
        if (exports.isTT) {
            return promisify(tt.getUserInfo)(config);
        }
        return Promise.resolve({
            userInfo: {
                avatarUrl: "",
                nickName: "",
                gender: 1,
                city: "Beijing",
                province: "Beijing",
                country: "China",
                language: "zh-hans",
            },
            rawData: "",
            signature: "",
            encryptedData: "",
            iv: "",
            watermark: {
                appid: "",
                timestamp: "",
            },
        });
    },
    getMenuButtonLayout: function () {
        if (exports.isTT) {
            return tt.getMenuButtonLayout();
        }
        return {
            bottom: 0,
            errMsg: "getMenuButtonBoundingClientRect:ok",
            height: 0,
            left: 0,
            right: 0,
            top: 50,
            width: 0,
        };
    },
    connectSocket: function (config) {
        if (exports.isTT) {
            return tt.connectSocket(config);
        }
        var url = config.url, protocols = config.protocols, success = config.success, complete = config.complete;
        var ws = new WebSocket(url, protocols);
        ws.binaryType = "arraybuffer";
        safeCall(success, complete)();
        var socket = {
            send: function (config) {
                ws.send(config.data);
                safeCall(config.success, config.complete)();
            },
            close: function (config) {
                ws.close(config.code, config.reason);
                safeCall(config.success, config.complete)();
            },
            onOpen: function (handler) {
                ws.addEventListener("open", function (event) {
                    handler({ header: {} });
                });
            },
            onClose: function (handler) {
                ws.addEventListener("close", handler);
            },
            onError: function (handler) {
                ws.addEventListener("error", function (event) {
                    handler({ errMsg: "[unknown] web socket error" });
                });
            },
            onMessage: function (handler) {
                ws.addEventListener("message", function (event) {
                    handler(event.data);
                });
            },
        };
        return socket;
    },
    request: function (config) {
        if (exports.isTT) {
            return promisify(tt.request)(config);
        }
        var bodyStr = "";
        if (typeof config.data === "string") {
            bodyStr = config.data;
        }
        else {
            bodyStr = JSON.stringify(config.data);
        }
        return fetch(config.url, {
            method: config.method || "GET",
            headers: config.header,
            body: bodyStr,
        })
            .then(function (res) {
            return (config.dataType === "arraybuffer"
                ? res.arrayBuffer()
                : res.json()).then(function (data) {
                return {
                    data: data,
                    statusCode: res.status,
                    headers: res.headers,
                };
            });
        })
            .then(function (result) {
            safeCall(config.success, config.complete)(result);
            return result;
        })
            .catch(function (err) {
            safeCall(config.fail, config.complete)({ errMsg: err.message });
            return Promise.reject(err);
        });
    },
    uploadFile: function (config) {
        if (exports.isTT) {
            return promisify(tt.uploadFile)(config);
        }
        return getBlobFromURI(config.filePath)
            .then(function (blob) {
            var data = new FormData();
            var formData = config.formData;
            if (formData) {
                Object.keys(formData).forEach(function (key) {
                    data.append(key, formData[key]);
                });
            }
            data.append(config.name, blob);
            return data;
        })
            .then(function (formData) {
            return fetch(config.url, {
                body: formData,
                method: "POST",
            });
        })
            .then(function (res) {
            return res.text().then(function (data) { return ({
                data: data,
                statusCode: res.status,
                headers: res.headers,
            }); });
        })
            .then(function (result) {
            safeCall(config.success, config.complete)(result);
            return result;
        })
            .catch(function (err) {
            safeCall(config.fail, config.complete)(err);
            return Promise.reject(err);
        });
    },
    getFileSystemManager: function () {
        var _window = window;
        if (exports.isTT) {
            var fsm = tt.getFileSystemManager();
            return {
                writeFile: promisify(fsm.writeFile),
                writeFileSync: fsm.writeFileSync,
                readFile: promisify(fsm.readFile),
                readFileSync: fsm.readFileSync,
            };
        }
        return {
            writeFile: function (config) {
                var blob = new Blob([config.data]);
                _window.__fileMap = _window.__fileMap || {};
                _window.__fileMap[config.filePath] = URL.createObjectURL(blob);
                return Promise.resolve();
            },
            writeFileSync: function (filePath, data, encoding) {
                var blob = new Blob([data]);
                var _window = window;
                _window.__fileMap = _window.__fileMap || {};
                _window.__fileMap[filePath] = URL.createObjectURL(blob);
            },
            readFile: function (config) {
                return getArrayBufferFromURI(config.filePath).then(function (buffer) {
                    var result = {
                        data: buffer,
                        errMsg: "readFile:ok",
                    };
                    safeCall(config.success, config.complete)(result);
                    return result;
                });
            },
            readFileSync: function (filePath, encoding) {
                if (_window.__fileMap[filePath]) {
                    throw Error("浏览器不能同步读取 temp file");
                }
                return _window.__fileMap[filePath];
            },
        };
    },
    reportAnalytics: function (eventName, data) {
        if (data === void 0) { data = {}; }
        if (exports.isTT) {
            tt.reportAnalytics(eventName, data);
        }
    },
};
function pick(o, keys) {
    if (!o)
        return undefined;
    return keys.reduce(function (r, key) {
        return (r[key] = o[key]);
    }, {});
}
exports.pick = pick;
function createAudio() {
    if (exports.isTT) {
        return tt.createInnerAudioContext();
    }
    return new Audio();
}
exports.createAudio = createAudio;
function sleep(t) {
    return new Promise(function (resolve) { return setTimeout(resolve, t); });
}
exports.sleep = sleep;
exports.PRODUCT_TYPE = {
    1: "colorSet",
    2: "roleSke",
    3: "room",
};
function formatTime(timestamp) {
    var date = new Date(timestamp);
    return date.getFullYear() + "." + (date.getMonth() + 1) + "." + date.getDate();
}
exports.formatTime = formatTime;
function isiPhoneX() {
    return (window.innerWidth === 812 ||
        window.innerWidth === 896 ||
        window.innerHeight === 812 ||
        window.innerHeight === 896);
}
exports.isiPhoneX = isiPhoneX;
exports.showGuidePromise = new Promise(function (resolve) {
    var key = "4.16.8";
    if (exports.isTT) {
        tt.getStorage({
            key: key,
            success: function (res) {
                resolve(res.data !== "yes");
            },
            fail: function () {
                resolve(true);
            },
            complete: function () {
                tt.setStorage({ key: key, data: "yes" });
            },
        });
    }
    else {
        resolve(localStorage.getItem(key) !== "yes");
        localStorage.setItem(key, "yes");
    }
});
function subStringByLength(str, num, fillString) {
    if (fillString === void 0) { fillString = "..."; }
    if (str.length <= num) {
        return str;
    }
    var resultStr = "";
    var cnt = 0;
    for (var index = 0; index < str.length; index++) {
        var char = str.charCodeAt(index);
        cnt += char >= 128 ? 1 : 0.5;
        resultStr += str[index];
        if (cnt >= num) {
            return resultStr + fillString;
        }
    }
    return str;
}
exports.subStringByLength = subStringByLength;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        