(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/pvp-client/build/common/index.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'index', __filename);"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log = function (res) {
};
function connectSocket(config) {
    if (typeof tt !== "undefined" &&
        (typeof window === "undefined" ||
            (typeof window !== "undefined" &&
                typeof window.initTTSDK === "undefined"))) {
        return tt.connectSocket(config);
    }
    var url = config.url, protocols = config.protocols;
    log("url = " + url);
    var ws = new WebSocket(url, protocols);
    ws.binaryType = "arraybuffer";
    var socket = {
        ws: ws,
        send: function (config) {
            var data = config.data;
            try {
                this.ws.send(data);
            }
            catch (e) { }
        },
        close: function () {
            this.ws.close();
        },
        onOpen: function (cb) {
            ws.addEventListener("open", cb);
        },
        onMessage: function (cb) {
            ws.addEventListener("message", cb);
        },
        onClose: function (cb) {
            ws.addEventListener("close", cb);
        },
        onError: function (cb) {
            ws.addEventListener("error", cb);
        },
    };
    return socket;
}
exports.connectSocket = connectSocket;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        