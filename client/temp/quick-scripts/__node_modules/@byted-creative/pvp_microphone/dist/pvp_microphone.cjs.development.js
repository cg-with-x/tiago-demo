(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/pvp_microphone/dist/pvp_microphone.cjs.development.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'pvp_microphone.cjs.development', __filename);'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var stt = _interopDefault(require('@byted-creative/stt-promisify'));
var EventEmitter = _interopDefault(require('eventemitter3'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

/**
 * 延迟承诺类。属于Promise的衍生类。
 */
var Deferred =
/*#__PURE__*/

/** @class */
function () {
  function Deferred() {
    var _this = this;

    this.promise = new Promise(function (resolve, reject) {
      Object.defineProperties(_this, {
        resolve: {
          value: function (value) {
            _this.value = value;
            resolve(value);
          },
          writable: false
        },
        reject: {
          value: reject,
          writable: false
        }
      });
    });
  }

  return Deferred;
}();

var config = {
  appID: '',
  roomNum: '',
  openID: '',
  channelID: '',
  source: 'live',
  audioStatus: {
    local: true,
    remote: true
  }
};
var _debugInstance = null;
var setDebugLog = function (debugInstance) {
  _debugInstance = debugInstance;
};
var log = function () {
  var param = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    param[_i] = arguments[_i];
  }

  if (_debugInstance) {
    _debugInstance.log(param);
  }
};
/**
 * rtc 引擎实例
 */

var rtcEngine; // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
// @ts-ignore
// eslint-disable-next-line no-undef

rtcEngine = typeof tt !== 'undefined' && tt.getRtcEngine && /*#__PURE__*/tt.getRtcEngine();
var eventEmitter = /*#__PURE__*/new EventEmitter();
/**
 * 错误原因
 */

var REASON;

(function (REASON) {
  REASON[REASON["GEN_CHANNEL_ERROR"] = 1] = "GEN_CHANNEL_ERROR";
  REASON[REASON["GET_AUTH_FAILED"] = 2] = "GET_AUTH_FAILED";
  REASON[REASON["JOIN_CHANNEL_FAIL"] = 3] = "JOIN_CHANNEL_FAIL";
  REASON[REASON["CONNECTION_LOST"] = 4] = "CONNECTION_LOST";
  REASON[REASON["LEAVE_CHANNEL_FAIL"] = 5] = "LEAVE_CHANNEL_FAIL";
  REASON[REASON["ENABLE_LOCAL_AUDIO_FAIL"] = 6] = "ENABLE_LOCAL_AUDIO_FAIL";
  REASON[REASON["DISABLE_LOCAL_AUDIO_FAIL"] = 7] = "DISABLE_LOCAL_AUDIO_FAIL";
  REASON[REASON["MUTE_ALL_REMOTE_AUDIO_FAIL"] = 8] = "MUTE_ALL_REMOTE_AUDIO_FAIL";
  REASON[REASON["UNMUTE_ALL_REMOTE_AUDIO_FAIL"] = 9] = "UNMUTE_ALL_REMOTE_AUDIO_FAIL";
})(REASON || (REASON = {}));
/**
 * 初始化参数
 * @param param.openID: 玩家openid
 * @param param.roomNum: 要加入的对战房间roomNum
 * @param param.appID: 游戏appid
 * @param param.source: 来源，目前写"live"
 */


function init(param) {
  return __awaiter(this, void 0, void 0, function () {
    var defer, res, url, err_1;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          Object.assign(config, param);
          log('init micro params', param);
          defer = new Deferred();
          _a.label = 1;

        case 1:
          _a.trys.push([1, 3,, 4]);

          url = "https://i.snssdk.com/tfe/route/ttg_wonderland/w_proj/generate_room_id?room_number=" + config.roomNum + "&open_id=" + config.openID + "&app_id=" + config.appID + "&source=" + config.source;
          log('url', url);
          return [4
          /*yield*/
          , stt.request({
            url: url,
            method: 'GET'
          })];

        case 2:
          res = _a.sent();
          log('get channel', res);
          return [3
          /*break*/
          , 4];

        case 3:
          err_1 = _a.sent();
          defer.reject({
            reason: REASON.GEN_CHANNEL_ERROR,
            data: err_1
          });
          return [3
          /*break*/
          , 4];

        case 4:
          if (!(res && res.data && res.data.data)) return [3
          /*break*/
          , 6];
          config.channelID = res.data.data.channel_id;
          config.audioStatus = {
            local: res.data.data.local_audio_status,
            remote: res.data.data.remote_audio_status
          }; // 获取用户已经授权过的配置。结果中只会包含小程序向用户请求过的权限。
          // 没有麦克风权限，获取

          return [4
          /*yield*/
          , stt.authorize({
            scope: 'scope.record'
          }).catch(function (err) {
            console.log('fail to authorize record');
            defer.reject({
              reason: REASON.GET_AUTH_FAILED,
              data: err
            });
          })];

        case 5:
          // 获取用户已经授权过的配置。结果中只会包含小程序向用户请求过的权限。
          // 没有麦克风权限，获取
          _a.sent();

          console.log('init success');
          defer.resolve(config.audioStatus);
          return [3
          /*break*/
          , 7];

        case 6:
          defer.reject({
            reason: REASON.GEN_CHANNEL_ERROR,
            data: res
          });
          _a.label = 7;

        case 7:
          return [2
          /*return*/
          , defer.promise];
      }
    });
  });
}

function setAllAudioState() {
  return __awaiter(this, void 0, void 0, function () {
    var err;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          err = null;
          if (!config.audioStatus.local) return [3
          /*break*/
          , 2];
          return [4
          /*yield*/
          , enableLocalAudio().catch(function (err) {
            return err;
          })];

        case 1:
          err = _a.sent();
          return [3
          /*break*/
          , 4];

        case 2:
          return [4
          /*yield*/
          , disableLocalAudio().catch(function (err) {
            return err;
          })];

        case 3:
          err = _a.sent();
          _a.label = 4;

        case 4:
          if (err) {
            log("\u8BBE\u7F6E\u9EA6\u514B\u98CE\u72B6\u6001\u9519\u8BEF\u4E86", err);
          }

          err = null;
          if (!config.audioStatus.remote) return [3
          /*break*/
          , 6];
          return [4
          /*yield*/
          , unmuteAllRemoteAudioStream().catch(function (err) {
            return err;
          })];

        case 5:
          err = _a.sent();
          return [3
          /*break*/
          , 8];

        case 6:
          return [4
          /*yield*/
          , muteAllRemoteAudioStream().catch(function (err) {
            return err;
          })];

        case 7:
          err = _a.sent();
          _a.label = 8;

        case 8:
          if (err) {
            log("\u8BBE\u7F6E\u8FDC\u7AEF\u72B6\u6001\u9519\u8BEF", err);
          }

          return [2
          /*return*/
          ];
      }
    });
  });
}
/**
 * 加入连麦频道，开始聊天
 */


function startChat() {
  var _this = this;

  var defer = new Deferred();
  var retryCount = 3;

  if (!rtcEngine) {
    return defer.promise;
  }

  var joinSuccessChannelCb = function () {
    return __awaiter(_this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        log('joinChannelSuccess'); // 根据audiostaatus来设置本地和远端推流状态

        rtcEngine && rtcEngine.off('joinChannelSuccess', joinSuccessChannelCb);
        log('resolve microphone');
        setAllAudioState();
        defer.resolve(rtcEngine);
        return [2
        /*return*/
        ];
      });
    });
  }; // 3. 监听需要的事件


  rtcEngine.on('joinChannelSuccess', joinSuccessChannelCb);
  rtcEngine.on('userJoined', function (data) {
    return __awaiter(_this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        log('user joined data', data);
        setAllAudioState();
        return [2
        /*return*/
        ];
      });
    });
  });
  rtcEngine.on('connectionLost', function (err) {
    log('microphone connectionLost');
    eventEmitter.emit('connectionLost', err);
    defer.reject({
      reason: REASON.CONNECTION_LOST,
      data: err
    });
  });
  rtcEngine.on('error', function (err) {
    if (retryCount >= 0) {
      return joinChannel();
    }

    log('microphone error');
    eventEmitter.emit('error', err);
    defer.reject({
      reason: REASON.JOIN_CHANNEL_FAIL,
      data: err
    });
  });

  function joinChannel() {
    retryCount--;
    rtcEngine.joinChannel({
      channelId: config.channelID,
      uid: config.openID,
      fail: function (err) {
        log('microphone join channel error');
        defer.reject({
          reason: REASON.JOIN_CHANNEL_FAIL,
          data: err
        });
      }
    });
  }

  joinChannel();
  return defer.promise;
}
/**
 * 结束聊天，退出房间
 */

function endChat() {
  var defer = new Deferred();

  if (!rtcEngine) {
    return defer.promise;
  }

  rtcEngine.leaveChannel({
    success: function () {
      return defer.resolve();
    },
    fail: function (err) {
      log('fail to end chat');
      defer.reject({
        reason: REASON.LEAVE_CHANNEL_FAIL,
        data: err
      });
    }
  });
  return defer.promise;
}
/**
 * 开启本地推流
 */

function enableLocalAudio() {
  var defer = new Deferred();

  if (!rtcEngine) {
    return defer.promise;
  }

  rtcEngine.enableLocalAudio({
    success: function () {
      log('enable local success');
      config.audioStatus.local = true;
      updateMicState(config.openID, config.appID, config.audioStatus.local, config.audioStatus.remote);
      defer.resolve();
    },
    fail: function (err) {
      log('enable local fail', err);
      defer.reject({
        reason: REASON.ENABLE_LOCAL_AUDIO_FAIL,
        data: err
      });
    }
  });
  return defer.promise;
}
/**
 * 关闭本地推流
 */

function disableLocalAudio() {
  var defer = new Deferred();

  if (!rtcEngine) {
    return defer.promise;
  }

  rtcEngine.disableLocalAudio({
    success: function () {
      log('disable local success');
      config.audioStatus.local = false;
      updateMicState(config.openID, config.appID, config.audioStatus.local, config.audioStatus.remote);
      defer.resolve();
    },
    fail: function (err) {
      log('disable local fail', err);
      defer.reject({
        reason: REASON.DISABLE_LOCAL_AUDIO_FAIL,
        data: err
      });
    }
  });
  return defer.promise;
}
/**
 * 静音远端
 */

function muteAllRemoteAudioStream() {
  var defer = new Deferred();

  if (!rtcEngine) {
    return defer.promise;
  }

  rtcEngine.muteAllRemoteAudioStream({
    success: function () {
      log('muted success');
      config.audioStatus.remote = false;
      updateMicState(config.openID, config.appID, config.audioStatus.local, config.audioStatus.remote);
      defer.resolve();
    },
    fail: function (err) {
      log('muted fail', err);
      defer.reject({
        reason: REASON.MUTE_ALL_REMOTE_AUDIO_FAIL,
        data: err
      });
    }
  });
  return defer.promise;
}
/**
 * 远端解除静音
 */

function unmuteAllRemoteAudioStream() {
  var defer = new Deferred();

  if (!rtcEngine) {
    return defer.promise;
  }

  rtcEngine.unmuteAllRemoteAudioStream({
    success: function () {
      log('unmuted success');
      config.audioStatus.remote = true;
      updateMicState(config.openID, config.appID, config.audioStatus.local, config.audioStatus.remote);
      defer.resolve();
    },
    fail: function (err) {
      log('unmuted fail', err);
      defer.reject({
        reason: REASON.UNMUTE_ALL_REMOTE_AUDIO_FAIL,
        data: err
      });
    }
  });
  return defer.promise;
}
/**
 * 获取debug数据
 */

function getDebugInfo() {
  return config;
}
/**
 * 获取audio的状态，local和remote
 */

function getAudioStatus() {
  return config.audioStatus;
}
/**
 * 监听连麦事件
 * @param eventName 事件名
 * @param listener 监听函数
 */

function on(eventName, listener) {
  eventEmitter.on(eventName, listener);
}
/**
 * 移除所有监听
 */

function removeAllListeners() {
  eventEmitter.removeAllListeners();
}

function updateMicState(openID, appID, localAudioStatus, remoteAudioStatus) {
  return __awaiter(this, void 0, void 0, function () {
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , stt.request({
            url: 'https://i.snssdk.com/tfe/route/ttg_wonderland/w_proj/update_audio_status',
            method: 'POST',
            data: {
              // eslint-disable-next-line @typescript-eslint/camelcase
              open_id: openID,
              // eslint-disable-next-line @typescript-eslint/camelcase
              app_id: appID,
              // eslint-disable-next-line @typescript-eslint/camelcase
              local_audio_status: localAudioStatus,
              // eslint-disable-next-line @typescript-eslint/camelcase
              remote_audio_status: remoteAudioStatus,
              source: config.source
            }
          })];

        case 1:
          _a.sent();

          return [2
          /*return*/
          ];
      }
    });
  });
}

var api = {
    __proto__: null,
    config: config,
    setDebugLog: setDebugLog,
    log: log,
    get rtcEngine () { return rtcEngine; },
    get REASON () { return REASON; },
    init: init,
    startChat: startChat,
    endChat: endChat,
    enableLocalAudio: enableLocalAudio,
    disableLocalAudio: disableLocalAudio,
    muteAllRemoteAudioStream: muteAllRemoteAudioStream,
    unmuteAllRemoteAudioStream: unmuteAllRemoteAudioStream,
    getDebugInfo: getDebugInfo,
    getAudioStatus: getAudioStatus,
    on: on,
    removeAllListeners: removeAllListeners
};

exports.PVPMicrophone = api;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        