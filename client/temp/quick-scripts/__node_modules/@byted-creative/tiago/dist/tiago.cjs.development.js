(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/tiago/dist/tiago.cjs.development.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'tiago.cjs.development', __filename);'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var eventemitter3 = require('eventemitter3');
var pvp_match = require('@byted-creative/pvp_match');
var CocosMatchUI = require('@byted-creative/cocos_pvp_ui');
var CocosMatchUI__default = _interopDefault(CocosMatchUI);
var laya_pvp_ui = require('@byted-creative/laya_pvp_ui');
var stt = _interopDefault(require('@byted-creative/stt-promisify'));
var pvp_microphone = require('@byted-creative/pvp_microphone');
var pvpClient = require('@byted-creative/pvp-client');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var _a, _b;

var GAME_ENV;

(function (GAME_ENV) {
  GAME_ENV["Test"] = "test";
  GAME_ENV["Release"] = "release";
})(GAME_ENV || (GAME_ENV = {})); // 匹配类型


var MATCH_TYPE;

(function (MATCH_TYPE) {
  MATCH_TYPE[MATCH_TYPE["Single"] = 1] = "Single";
  MATCH_TYPE[MATCH_TYPE["NVN"] = 2] = "NVN";
})(MATCH_TYPE || (MATCH_TYPE = {})); // 业务场景类型


var BUSINESS_SCENE;

(function (BUSINESS_SCENE) {
  BUSINESS_SCENE["Wonderland"] = "wonderland";
  BUSINESS_SCENE["LiveRoom"] = "liveRoom";
})(BUSINESS_SCENE || (BUSINESS_SCENE = {}));

var Deferred =
/*#__PURE__*/

/** @class */
function () {
  function Deferred() {
    var _this = this;

    this.promise = new Promise(function (resolve, reject) {
      Object.defineProperties(_this, {
        resolve: {
          value: function (value) {
            // @ts-ignore
            _this.value = value;
            resolve(value);
          },
          writable: false
        },
        reject: {
          value: reject,
          writable: false
        }
      });
    });
  }

  return Deferred;
}();
var ERROR_CODE;

(function (ERROR_CODE) {
  // 匹配错误
  ERROR_CODE[ERROR_CODE["MATCH_SUCCESS"] = 0] = "MATCH_SUCCESS";
  ERROR_CODE[ERROR_CODE["MATCH_ERROR"] = 1] = "MATCH_ERROR";
  ERROR_CODE[ERROR_CODE["MATCH_TIMEOUT"] = 2] = "MATCH_TIMEOUT";
  ERROR_CODE[ERROR_CODE["MATCH_CANCEL"] = 3] = "MATCH_CANCEL";
  ERROR_CODE[ERROR_CODE["MATCH_CLOSE"] = 4] = "MATCH_CLOSE"; // 连麦错误

  ERROR_CODE[ERROR_CODE["GEN_CHANNEL_ERROR"] = 101] = "GEN_CHANNEL_ERROR";
  ERROR_CODE[ERROR_CODE["GET_AUTH_FAILED"] = 102] = "GET_AUTH_FAILED";
  ERROR_CODE[ERROR_CODE["JOIN_CHANNEL_FAIL"] = 103] = "JOIN_CHANNEL_FAIL";
  ERROR_CODE[ERROR_CODE["CONNECTION_LOST"] = 104] = "CONNECTION_LOST";
  ERROR_CODE[ERROR_CODE["LEAVE_CHANNEL_FAIL"] = 105] = "LEAVE_CHANNEL_FAIL";
  ERROR_CODE[ERROR_CODE["ENABLE_LOCAL_AUDIO_FAIL"] = 106] = "ENABLE_LOCAL_AUDIO_FAIL";
  ERROR_CODE[ERROR_CODE["DISABLE_LOCAL_AUDIO_FAIL"] = 107] = "DISABLE_LOCAL_AUDIO_FAIL";
  ERROR_CODE[ERROR_CODE["MUTE_ALL_REMOTE_AUDIO_FAIL"] = 108] = "MUTE_ALL_REMOTE_AUDIO_FAIL";
  ERROR_CODE[ERROR_CODE["UNMUTE_ALL_REMOTE_AUDIO_FAIL"] = 109] = "UNMUTE_ALL_REMOTE_AUDIO_FAIL"; // 房间错误

  ERROR_CODE[ERROR_CODE["GAME_ROOM_CONNECTION_LOST"] = 201] = "GAME_ROOM_CONNECTION_LOST"; // 内部错误

  ERROR_CODE[ERROR_CODE["WITHOUT_INIT"] = 301] = "WITHOUT_INIT";
  ERROR_CODE[ERROR_CODE["INVALID_INPUT"] = 302] = "INVALID_INPUT";
})(ERROR_CODE || (ERROR_CODE = {}));

var MATCH_ERROR_CODE;

(function (MATCH_ERROR_CODE) {
  MATCH_ERROR_CODE[MATCH_ERROR_CODE["MATCH_SUCCESS"] = 0] = "MATCH_SUCCESS";
  MATCH_ERROR_CODE[MATCH_ERROR_CODE["MATCH_ERROR"] = 1] = "MATCH_ERROR";
  MATCH_ERROR_CODE[MATCH_ERROR_CODE["MATCH_TIMEOUT"] = 2] = "MATCH_TIMEOUT";
  MATCH_ERROR_CODE[MATCH_ERROR_CODE["MATCH_CANCEL"] = 3] = "MATCH_CANCEL";
  MATCH_ERROR_CODE[MATCH_ERROR_CODE["MATCH_CLOSE"] = 4] = "MATCH_CLOSE";
})(MATCH_ERROR_CODE || (MATCH_ERROR_CODE = {}));

var MATCH_ERROR_MSG = (_a = {}, _a[MATCH_ERROR_CODE.MATCH_SUCCESS] = 'success', _a[MATCH_ERROR_CODE.MATCH_ERROR] = 'match error', _a[MATCH_ERROR_CODE.MATCH_TIMEOUT] = 'match timeout', _a[MATCH_ERROR_CODE.MATCH_CANCEL] = 'match cancel', _a[MATCH_ERROR_CODE.MATCH_CLOSE] = 'match interrupted by other reasons', _a);
var RTC_ERROR_CODE;

(function (RTC_ERROR_CODE) {
  RTC_ERROR_CODE[RTC_ERROR_CODE["GEN_CHANNEL_ERROR"] = 1] = "GEN_CHANNEL_ERROR";
  RTC_ERROR_CODE[RTC_ERROR_CODE["GET_AUTH_FAILED"] = 2] = "GET_AUTH_FAILED";
  RTC_ERROR_CODE[RTC_ERROR_CODE["JOIN_CHANNEL_FAIL"] = 3] = "JOIN_CHANNEL_FAIL";
  RTC_ERROR_CODE[RTC_ERROR_CODE["CONNECTION_LOST"] = 4] = "CONNECTION_LOST";
  RTC_ERROR_CODE[RTC_ERROR_CODE["LEAVE_CHANNEL_FAIL"] = 5] = "LEAVE_CHANNEL_FAIL";
  RTC_ERROR_CODE[RTC_ERROR_CODE["ENABLE_LOCAL_AUDIO_FAIL"] = 6] = "ENABLE_LOCAL_AUDIO_FAIL";
  RTC_ERROR_CODE[RTC_ERROR_CODE["DISABLE_LOCAL_AUDIO_FAIL"] = 7] = "DISABLE_LOCAL_AUDIO_FAIL";
  RTC_ERROR_CODE[RTC_ERROR_CODE["MUTE_ALL_REMOTE_AUDIO_FAIL"] = 8] = "MUTE_ALL_REMOTE_AUDIO_FAIL";
  RTC_ERROR_CODE[RTC_ERROR_CODE["UNMUTE_ALL_REMOTE_AUDIO_FAIL"] = 9] = "UNMUTE_ALL_REMOTE_AUDIO_FAIL";
})(RTC_ERROR_CODE || (RTC_ERROR_CODE = {}));

var RTC_ERROR_MSG = (_b = {}, _b[RTC_ERROR_CODE.GEN_CHANNEL_ERROR] = '生成连麦频道id失败', _b[RTC_ERROR_CODE.GET_AUTH_FAILED] = '获取权限失败', _b[RTC_ERROR_CODE.JOIN_CHANNEL_FAIL] = '加入连麦频道失败', _b[RTC_ERROR_CODE.CONNECTION_LOST] = '连麦频道链接丢失', _b[RTC_ERROR_CODE.LEAVE_CHANNEL_FAIL] = '离开连麦频道失败', _b[RTC_ERROR_CODE.ENABLE_LOCAL_AUDIO_FAIL] = '开启本地推流失败', _b[RTC_ERROR_CODE.DISABLE_LOCAL_AUDIO_FAIL] = '关闭本地推流失败', _b[RTC_ERROR_CODE.MUTE_ALL_REMOTE_AUDIO_FAIL] = '远端静音失败', _b[RTC_ERROR_CODE.UNMUTE_ALL_REMOTE_AUDIO_FAIL] = '解除远端静音失败', _b);
var GAME_ROOM_ERROR_CODE;

(function (GAME_ROOM_ERROR_CODE) {
  GAME_ROOM_ERROR_CODE[GAME_ROOM_ERROR_CODE["CONNECTION_LOST"] = 201] = "CONNECTION_LOST";
})(GAME_ROOM_ERROR_CODE || (GAME_ROOM_ERROR_CODE = {}));

var TiagoError =
/*#__PURE__*/

/** @class */
function (_super) {
  __extends(TiagoError, _super);

  function TiagoError(code, msg) {
    var _this = _super.call(this, msg) || this;

    _this.code = code;
    _this.msg = msg;
    return _this;
  }

  return TiagoError;
}(Error);

var Match =
/*#__PURE__*/

/** @class */
function (_super) {
  __extends(Match, _super);

  function Match(params) {
    var _this = _super.call(this) || this;

    if (params && params.debugInstance) {
      _this._debugInstance = params.debugInstance;
      pvp_match.PVPMatch.setDebugLog(_this._debugInstance);
    }

    _this._config = params;
    return _this;
  }

  Match.prototype.startMatch = function () {
    return __awaiter(this, void 0, void 0, function () {
      var initInfo, launchScene, matchUI, _a;

      var _this = this;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            initInfo = this._config;
            launchScene = initInfo.launchScene || initInfo.launch_scene;
            matchUI = this.getMatchUI();
            initInfo.userInfo.isAnchor = initInfo.playerRole === 'streamer';
            this.log('input match init data', {
              gameId: initInfo.gameId,
              environment: initInfo.environment,
              hostAppId: initInfo.hostAppId,
              userInfo: initInfo.userInfo,
              isMultiPlayer: initInfo.isMultiPlayer
            });
            pvp_match.PVPMatch.init({
              gameId: initInfo.gameId,
              environment: initInfo.environment,
              hostAppId: initInfo.hostAppId,
              userInfo: initInfo.userInfo,
              isMultiPlayer: initInfo.isMultiPlayer
            });
            _a = matchUI;
            if (!_a) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , matchUI.show(initInfo.playerNumber, initInfo.userInfo, this._config.debug)];

          case 1:
            _a = _b.sent();
            _b.label = 2;

          case 2:
            this.log('init info', initInfo);

            if (initInfo && launchScene === 'liveStream') {
              this.log('live sdk setPreferredFramesPerSecond 30');
              stt.setPreferredFramesPerSecond(30);
            }

            pvp_match.PVPMatch.startMatch(this._config.retryCount).then(function (param) {
              return __awaiter(_this, void 0, void 0, function () {
                var roomNum, playerList, retTeamList, retPlayerList, i, teamInfo;
                return __generator(this, function (_a) {
                  switch (_a.label) {
                    case 0:
                      this.log('match success data', param);
                      roomNum = param.roomNum, playerList = param.playerList;
                      retTeamList = [];
                      retPlayerList = [];

                      for (i = 0; i < playerList.length; i++) {
                        teamInfo = {
                          size: 1,
                          playerList: []
                        };
                        teamInfo.playerList.push(playerList[i].extraInfo);
                        retTeamList.push(teamInfo);
                        retPlayerList.push(playerList[i].extraInfo);
                      }

                      if (!matchUI) return [3
                      /*break*/
                      , 2];
                      matchUI.matchSuccess(playerList);
                      return [4
                      /*yield*/
                      , matchUI.whenClosed()];

                    case 1:
                      _a.sent();

                      _a.label = 2;

                    case 2:
                      this.emit('match-success', {
                        id: this._config.appId + "-" + roomNum + "-" + new Date().getTime(),
                        type: MATCH_TYPE.Single,
                        teamList: retTeamList,
                        playerList: retPlayerList
                      });
                      this.emit('create-game-room-success', {
                        roomNum: roomNum
                      });
                      return [2
                      /*return*/
                      ];
                  }
                });
              });
            }).catch(function (error) {
              // todo 错误信息
              _this.emit('error', {
                code: error.reason,
                msg: MATCH_ERROR_MSG[error.reason]
              });
            });
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  Match.prototype.onMatchSuccess = function (cb) {
    this.on('match-success', cb);
  };

  Match.prototype.onCreateGameRoomSuccess = function (cb) {
    this.on('create-game-room-success', cb);
  };

  Match.prototype.onError = function (cb) {
    this.on('error', cb);
  };

  Match.prototype.log = function () {
    var param = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      param[_i] = arguments[_i];
    }

    if (this._debugInstance && this._debugInstance.log) {
      this._debugInstance.log(param);
    }
  };

  Match.prototype.getMatchUI = function () {
    if (typeof cc !== 'undefined') {
      return CocosMatchUI__default.instance;
    } else if (typeof Laya !== 'undefined') {
      return laya_pvp_ui.MatchUILaya.instance;
    }

    return null;
  };

  return Match;
}(eventemitter3.EventEmitter);

/**
 * 判断当前是否为字节小游戏环境
 */
function isTT() {
  return typeof tt !== "undefined";
}

var utils = {
    __proto__: null,
    isTT: isTT
};

var Tiago =
/*#__PURE__*/

/** @class */
function () {
  function Tiago() {}

  Tiago.init = function (param) {
    return __awaiter(this, void 0, void 0, function () {
      var defer, debugInstance, currentScene, isNewComer, queryAIInfo, userInfo;
      return __generator(this, function (_a) {
        defer = new Deferred();

        if (!this._instance) {
          this._instance = new Tiago();
        }

        debugInstance = this.getDebugUI();

        if (param.debug && debugInstance) {
          this._debugInstance = debugInstance;
          pvp_microphone.PVPMicrophone.setDebugLog(debugInstance);
        } // eslint-disable-next-line no-undef


        this._query = tt.getLaunchOptionsSync().query;
        currentScene = '';
        isNewComer = this._query.newComer;
        queryAIInfo = this._query.aiInfo || {};

        if (this._query.launchScene === 'liveStream') {
          currentScene = 'liveRoom';
          this._config = {
            currentScene: currentScene,
            scene: {
              liveRoom: {
                isNewComer: isNewComer,
                isAIRequired: false,
                aiInfo: isNewComer ? {
                  openId: queryAIInfo.openId || queryAIInfo.open_id,
                  nickName: queryAIInfo.nickName,
                  avatarUrl: queryAIInfo.avatarUrl,
                  gender: queryAIInfo.gender,
                  city: '',
                  province: '',
                  country: '',
                  language: '',
                  isLiveStreaming: true
                } : undefined
              }
            }
          };
        } else if (this._query.launchScene === 'wonderland') {
          currentScene = 'wonderland';
          this._config = {
            currentScene: currentScene,
            scene: {
              wonderland: {
                isNewComer: this._query.newcomer,
                aiInfo: isNewComer ? {
                  openId: queryAIInfo.openId || queryAIInfo.open_id,
                  nickName: queryAIInfo.nickName,
                  avatarUrl: queryAIInfo.avatarUrl,
                  gender: queryAIInfo.gender,
                  city: '',
                  province: '',
                  country: '',
                  language: '',
                  isLiveStreaming: false
                } : undefined
              }
            }
          };
        } else {
          // todo 其他场景情况，获取信息和翻译
          currentScene = '';
          this._config = {
            currentScene: currentScene,
            scene: {}
          };
        }

        userInfo = this._query.userInfo || {};
        this._userInfo = {
          openId: userInfo.openId || userInfo.open_id,
          nickName: userInfo.nickName,
          avatarUrl: userInfo.avatarUrl,
          gender: userInfo.gender,
          city: '',
          province: '',
          country: '',
          language: '',
          isLiveStreaming: currentScene === 'liveRoom'
        };
        this._options = param;
        this._hasInit = true;
        defer.resolve();
        return [2
        /*return*/
        , defer.promise];
      });
    });
  };

  Tiago.getConfig = function () {
    if (!this._hasInit) {
      throw new TiagoError(ERROR_CODE.WITHOUT_INIT, "please invoke init() before!");
    }

    return this._config;
  };

  Tiago.getUserInfo = function () {
    if (!this._hasInit) {
      throw new TiagoError(ERROR_CODE.WITHOUT_INIT, "please invoke init() before!");
    }

    return this._userInfo;
  };

  Tiago.startSingleMatch = function (params) {
    if (params === void 0) {
      params = {
        retryCount: 3
      };
    }

    if (!this._hasInit) {
      throw new TiagoError(ERROR_CODE.WITHOUT_INIT, "please invoke init() before!");
    }

    var match = new Match({
      appID: this._options.appId,
      environment: this._query.environment === 'online' ? 'online' : 'test',
      playerRole: this._userInfo.isLiveStreaming ? 'streamer' : 'unknown',
      hostAppId: this._query.hostAppId,
      gameId: this._options.appId || this._query.gameId,
      playerNumber: 2,
      launchScene: this._query.launchScene,
      isMultiPlayer: false,
      userInfo: this._userInfo,
      debugInstance: this._debugInstance,
      debug: this._options.debug || false,
      retryCount: params.retryCount
    });
    match.startMatch();
    return match;
  };

  Tiago.joinGameRoom = function (param) {
    if (!this._hasInit) {
      throw new TiagoError(ERROR_CODE.WITHOUT_INIT, "please invoke init() before!");
    }

    this._roomNum = param.roomNum;
    pvpClient.PVPClient.initConfig({
      appId: this._options.appId,
      environment: this._query.environment === 'online' ? 'online' : 'test',
      aId: this._query.hostAppId,
      platformId: 'wonderland',
      extraInfo: __assign(__assign({}, this._userInfo), {
        openid: this._userInfo.openId,
        // eslint-disable-next-line @typescript-eslint/camelcase
        open_id: this._userInfo.openId,
        businessID: '2',
        name: this._userInfo.nickName,
        icon: this._userInfo.avatarUrl
      })
    });
    var room = pvpClient.PVPClient.joinGameRoom({
      roomNum: param.roomNum
    });
    return room;
  };
  /**
   * 开始房间连麦
   */


  Tiago.joinRTCForGameRoom = function (room) {
    return __awaiter(this, void 0, void 0, function () {
      var defer, microUI;
      return __generator(this, function (_a) {
        if (!this._hasInit) {
          throw new TiagoError(ERROR_CODE.WITHOUT_INIT, "please invoke init() before!");
        }

        defer = new Deferred();

        if (!room) {
          defer.reject(new TiagoError(ERROR_CODE.INVALID_INPUT, "invalid input"));
        }

        microUI = this.getMicrophoneUI();

        if (microUI) {
          this.log('input open micro data', {
            openID: this._userInfo.openId,
            roomNum: this._roomNum,
            appID: this._options.appId,
            source: 'live'
          });

          try {
            microUI.show({
              openID: this._userInfo.openId,
              roomNum: this._roomNum,
              appID: this._options.appId,
              source: 'live'
            });
          } catch (error) {
            this.log('open micro error', error);
          }
        }

        defer.resolve();
        return [2
        /*return*/
        , defer.promise];
      });
    });
  };

  Tiago.getMicrophoneUI = function () {
    if (typeof cc !== 'undefined') {
      return CocosMatchUI.MicrophoneUI;
    } else if (typeof Laya !== 'undefined') {
      return laya_pvp_ui.MicrophoneUILaya.instance;
    }

    return null;
  };

  Tiago.getDebugUI = function () {
    if (typeof cc !== 'undefined') {
      return CocosMatchUI.DebugUI;
    } else if (typeof Laya !== 'undefined') {
      return laya_pvp_ui.DebugUI.instance;
    }

    return null;
  };

  Tiago.log = function () {
    var param = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      param[_i] = arguments[_i];
    }

    if (this._debugInstance) {
      this._debugInstance.log(param);
    }
  };

  Tiago.GAME_ENV = GAME_ENV;
  Tiago.MATCH_TYPE = MATCH_TYPE;
  Tiago.BUSINESS_SCENE = BUSINESS_SCENE;
  Tiago.utils = utils;
  Tiago._hasInit = false;
  return Tiago;
}();

exports.default = Tiago;

cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        