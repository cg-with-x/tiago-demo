(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/stt-promisify/dist/index.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'index', __filename);(function (global){
'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function isFunction(func) {
    return typeof func === 'function';
}
function safeCall(func) {
    var params = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        params[_i - 1] = arguments[_i];
    }
    if (isFunction(func))
        return func.apply(void 0, params);
}
function promisify(func) {
    return function (param) {
        return new Promise(function (resolve, reject) {
            func(__assign(__assign({}, param), { success: function (response) {
                    safeCall(param.success, response);
                    resolve(response);
                },
                fail: function (response) {
                    safeCall(param.fail, response);
                    reject(new Error(response.errMsg || 'unknown error'));
                },
                complete: function (response) {
                    safeCall(param.complete, response);
                } }));
        });
    };
}

var count = 0;
var queue = [];
function doQueue() {
    if (count < 5) {
        var task = queue.shift();
        if (task) {
            task();
        }
    }
}
function request(param) {
    var task = function () {
        count += 1;
        tt.request(__assign(__assign({}, param), { complete: function (res) {
                safeCall(param.complete, res);
                count -= 1;
                doQueue();
            } }));
    };
    if (count < 5) {
        task();
    }
    else {
        queue.push(task);
    }
}

var isH5 = Boolean(global.initTTSDK);
var stt;
if (window.tt) {
    stt = __assign(__assign({}, tt), { isH5: isH5,
        init: function (param) {
            safeCall(global.initTTSDK, param);
        },
        /**
         * 更新
         */
        getUpdateManager: function () {
            if (isH5) {
                return {
                    applyUpdate: function () { },
                    onCheckForUpdate: function (_handler) { },
                    onUpdateReady: function (_handler) { },
                    onUpdateFailed: function (_handler) { },
                };
            }
            return tt.getUpdateManager();
        }, 
        /**
         * 生命周期
         */
        exitMiniProgram: promisify(tt.exitMiniProgram), getLaunchOptionsSync: function () {
            if (isH5) {
                var query_1 = {};
                var referrerInfo = {};
                window.location.search
                    .slice(1)
                    .split("&")
                    .forEach(function (item) {
                    var _a = item.split("="), k = _a[0], v = _a[1];
                    if (k) {
                        query_1[k] = decodeURIComponent(v);
                    }
                });
                return {
                    errMsg: "getLaunchOptionsSync:ok",
                    query: query_1,
                    referrerInfo: referrerInfo,
                };
            }
            return tt.getLaunchOptionsSync();
        }, 
        /**
         * 图片 mp
         */
        compressImage: promisify(tt.compressImage), 
        /**
         * 视频
         *
         */
        // chooseVideo: promisify(tt.chooseVideo),
        /**
         * mg
         * 加速度计
         */
        startAccelerometer: promisify(tt.startAccelerometer), stopAccelerometer: promisify(tt.stopAccelerometer), 
        /**
         * mg
         * 剪贴板
         */
        setClipboardData: promisify(tt.setClipboardData), getClipboardData: promisify(tt.getClipboardData), 
        /**
         * mg
         * 罗盘
         */
        startCompass: promisify(tt.startCompass), stopCompass: promisify(tt.stopCompass), 
        /**
         * mg
         *网络
         */
        getNetworkType: promisify(tt.getNetworkType), 
        /**
         * mg
         * 屏幕亮度
         *
        */
        setKeepScreenOn: promisify(tt.setKeepScreenOn), 
        /**
         * mg
         * 振动
         */
        vibrateLong: promisify(tt.vibrateLong), vibrateShort: promisify(tt.vibrateShort), 
        /**
         * mg
         * 电池
         */
        getBatteryInfo: promisify(tt.getBatteryInfo), 
        /**
          * mg
          * 文件
          */
        getFileSystemManager: function () {
            var $ = tt.getFileSystemManager();
            var fsm = __assign(__assign({}, $), { access: promisify($.access.bind($)), copyFile: promisify($.copyFile.bind($)), getFileInfo: promisify($.getFileInfo.bind($)), getSavedFileList: promisify($.getSavedFileList.bind($)), mkdir: promisify($.mkdir.bind($)), readFile: promisify($.readFile.bind($)), readdir: promisify($.readdir.bind($)), removeSavedFile: promisify($.removeSavedFile.bind($)), rename: promisify($.rename.bind($)), rmdir: promisify($.rmdir.bind($)), saveFile: promisify($.saveFile.bind($)), unlink: promisify($.unlink.bind($)), unzip: promisify($.unzip.bind($)), writeFile: promisify($.writeFile.bind($)), stat: promisify($.stat.bind($)) });
            Object.setPrototypeOf(fsm, $);
            return fsm;
        }, 
        /**mg
         * 位置
         */
        getLocation: promisify(tt.getLocation), 
        /**
          *  图片 mg
          *
          */
        chooseImage: promisify(tt.chooseImage), saveImageToPhotosAlbum: promisify(tt.saveImageToPhotosAlbum), previewImage: promisify(tt.previewImage), getImageInfo: promisify(tt.getImageInfo), 
        /**
         * mg
         * 录屏
         */
        getGameRecorderManager: function () {
            var $ = tt.getGameRecorderManager();
            var grm = __assign(__assign({}, $), { recordClip: promisify($.recordClip.bind($)), clipVideo: promisify($.clipVideo.bind($)) //
             });
            Object.setPrototypeOf(grm, $);
            return grm;
        }, 
        /**
         * mg
         * 下载
         *
         */
        downloadFile: promisify(tt.downloadFile), 
        /**
         * 上传
         */
        uploadFile: promisify(tt.uploadFile), 
        /**
         * 发起请求
         *
         */
        request: promisify(request), 
        /**
         * 转发
         */
        showShareMenu: promisify(tt.showShareMenu), hideShareMenu: promisify(tt.hideShareMenu), navigateToVideoView: promisify(tt.navigateToVideoView), shareAppMessage: promisify(tt.shareAppMessage), 
        /**
         *
         */
        shareVideo: promisify(tt.shareVideo), 
        /**
         * 数据缓存
         */
        clearStorage: promisify(tt.clearStorage), 
        /**
         * 当 key 取不到的时候, tt 默认走到 fail 里,
         * 使用 Promise 封装后会走到 error 里,
         * 在使用 async/await 的时候并不方便,
         * 因此在这里处理成当 key 不存在的时候返回 understand
         */
        getStorage: function (param) {
            return promisify(tt.getStorage)(param)
                .then(function (res) { return res; })
                .catch(function () { return ({
                errMsg: "getStorage:ok",
                data: undefined,
            }); });
        }, setStorage: promisify(tt.setStorage), removeStorage: promisify(tt.removeStorage), getStorageInfo: promisify(tt.getStorageInfo), 
        /**
         * 系统信息
         */
        getSystemInfo: promisify(tt.getSystemInfo), 
        /**
         *
         * 交互
         */
        showToast: promisify(tt.showToast), hideToast: function (param) {
            if (param === void 0) { param = {}; }
            return promisify(tt.hideToast)(param);
        }, showLoading: promisify(tt.showLoading), hideLoading: function (param) {
            if (param === void 0) { param = {}; }
            return promisify(tt.hideLoading)(param);
        }, showModal: promisify(tt.showModal), showActionSheet: promisify(tt.showActionSheet), showFavoriteGuide: promisify(tt.showFavoriteGuide), 
        /**
         * 键盘
         */
        showKeyboard: promisify(tt.showKeyboard), updateKeyboard: promisify(tt.updateKeyboard), hideKeyboard: function (param) {
            if (param === void 0) { param = {}; }
            return promisify(tt.hideKeyboard)(param);
        }, 
        /**
         * 支付
         */
        requestGamePayment: promisify(tt.requestGamePayment), 
        /**
         * mg
         * 开放能力
         * 登录
         */
        login: function (param) {
            if (param === void 0) { param = {}; }
            return promisify(tt.login)(param);
        }, checkSession: promisify(tt.checkSession), getUserInfo: function (param) {
            if (param === void 0) { param = {}; }
            return promisify(tt.getUserInfo)(param);
        },
        /**
         * mg
         * 开放能力
         * 设置
         *
         */
        getSetting: function (param) {
            if (param === void 0) { param = {}; }
            return promisify(tt.getSetting)(param);
        },
        openSetting: function (param) {
            if (param === void 0) { param = {}; }
            return promisify(tt.openSetting)(param);
        }, 
        /**
         * mg
         * 开放能力
         * 授权
         *
         */
        authorize: promisify(tt.authorize), callHostMethod: function (param) {
            if (isH5) {
                return Promise.reject(new Error("H5 暂环境暂不支持 callHostMethod 方法"));
            }
            else {
                return promisify(tt.callHostMethod)(param);
            }
        },
        /**
         * mg
        * 开放能力
        * 关注
        */
        checkFollowState: function (param) {
            if (param === void 0) { param = {}; }
            return promisify(tt.checkFollowState)(param);
        }, 
        /**
         * mg 开放能力
         * 更多游戏
         */
        showMoreGamesModal: promisify(tt.showMoreGamesModal), 
        /**
         * mg开放能力
         * 开放数据
         */
        getCloudStorageByRelation: promisify(tt.getCloudStorageByRelation), setUserCloudStorage: promisify(tt.setUserCloudStorage), getUserCloudStorage: promisify(tt.getUserCloudStorage), removeUserCloudStorage: promisify(tt.removeUserCloudStorage), 
        /**
         * mg 开放能力
         * 排行榜
         */
        setUserGroup: promisify(tt.setUserGroup), 
        /**
         *
         * 小程序
         *
         */
        openLocation: promisify(tt.openLocation), getConnectedWifi: promisify(tt.getConnectedWifi), makePhoneCall: promisify(tt.makePhoneCall), scanCode: promisify(tt.scanCode), showNavigationBarLoading: promisify(tt.showNavigationBarLoading), hideNavigationBarLoading: promisify(tt.hideNavigationBarLoading), hideHomeButton: promisify(tt.hideHomeButton), setNavigationBarTitle: promisify(tt.setNavigationBarTitle), setNavigationBarColor: promisify(tt.setNavigationBarColor), getMenuButtonBoundingClientRect: promisify(tt.getMenuButtonBoundingClientRect), pageScrollTo: promisify(tt.pageScrollTo), startPullDownRefresh: promisify(tt.startPullDownRefresh), stopPullDownRefresh: promisify(tt.stopPullDownRefresh), showTabBarRedDot: promisify(tt.showTabBarRedDot), showTabBar: promisify(tt.showTabBar), setTabBarStyle: promisify(tt.setTabBarStyle), setTabBarItem: promisify(tt.setTabBarItem), setTabBarBadge: promisify(tt.setTabBarBadge), removeTabBarBadge: promisify(tt.removeTabBarBadge), hideTabBarRedDot: promisify(tt.hideTabBarRedDot), navigateTo: promisify(tt.navigateTo), redirectTo: promisify(tt.redirectTo), switchTab: promisify(tt.switchTab), navigateBack: promisify(tt.navigateBack), reLaunch: promisify(tt.reLaunch), getExtConfig: promisify(tt.getExtConfig), navigateBackMiniProgram: promisify(tt.navigateBackMiniProgram), chooseAddress: promisify(tt.chooseAddress), interactionAnalysis: promisify(tt.interactionAnalysis), followOfficialAccount: promisify(tt.followOfficialAccount) });
}
else {
    stt = {};
}
var stt$1 = stt;

module.exports = stt$1;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        