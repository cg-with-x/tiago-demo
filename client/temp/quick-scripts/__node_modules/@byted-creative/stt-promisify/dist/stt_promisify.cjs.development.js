(function() {"use strict";var __module = CC_EDITOR ? module : {exports:{}};var __filename = 'preview-scripts/__node_modules/@byted-creative/stt-promisify/dist/stt_promisify.cjs.development.js';var __require = CC_EDITOR ? function (request) {return cc.require(request, require);} : function (request) {return cc.require(request, __filename);};function __define (exports, require, module) {cc._RF.push(module, '', 'stt_promisify.cjs.development', __filename);(function (global){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function isFunction(func) {
  return typeof func === 'function';
}
function safeCall(func) {
  var params = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    params[_i - 1] = arguments[_i];
  }

  if (isFunction(func)) return func.apply(void 0, params);
}
function promisify(func) {
  return function (param) {
    return new Promise(function (resolve, reject) {
      func(__assign(__assign({}, param), {
        success: function (response) {
          safeCall(param.success, response);
          resolve(response);
        },
        fail: function (response) {
          safeCall(param.fail, response);
          reject(new Error(response.errMsg || 'unknown error'));
        },
        complete: function (response) {
          safeCall(param.complete, response);
        }
      }));
    });
  };
}

var count = 0;
var queue = [];

function doQueue() {
  if (count < 5) {
    var task = queue.shift();

    if (task) {
      task();
    }
  }
}

function request(param) {
  var task = function () {
    count += 1;
    tt.request(__assign(__assign({}, param), {
      complete: function (res) {
        safeCall(param.complete, res);
        count -= 1;
        doQueue();
      }
    }));
  };

  if (count < 5) {
    task();
  } else {
    queue.push(task);
  }
}

var isH5 = /*#__PURE__*/Boolean(global.initTTSDK);
var stt;

if (window.tt) {
  stt = /*#__PURE__*/__assign( /*#__PURE__*/__assign({}, tt), {
    isH5: isH5,
    init: function (param) {
      safeCall(global.initTTSDK, param);
    },

    /**
     * 更新
     */
    getUpdateManager: function () {
      if (isH5) {
        return {
          applyUpdate: function () {},
          onCheckForUpdate: function (_handler) {},
          onUpdateReady: function (_handler) {},
          onUpdateFailed: function (_handler) {}
        };
      }

      return tt.getUpdateManager();
    },

    /**
     * 生命周期
     */
    exitMiniProgram: /*#__PURE__*/promisify(tt.exitMiniProgram),
    getLaunchOptionsSync: function () {
      if (isH5) {
        var query_1 = {};
        var referrerInfo = {};
        window.location.search.slice(1).split("&").forEach(function (item) {
          var _a = item.split("="),
              k = _a[0],
              v = _a[1];

          if (k) {
            query_1[k] = decodeURIComponent(v);
          }
        });
        return {
          errMsg: "getLaunchOptionsSync:ok",
          query: query_1,
          referrerInfo: referrerInfo
        };
      }

      return tt.getLaunchOptionsSync();
    },

    /**
     * 图片 mp
     */
    compressImage: /*#__PURE__*/promisify(tt.compressImage),

    /**
     * 视频
     *
     */
    // chooseVideo: promisify(tt.chooseVideo),

    /**
     * mg
     * 加速度计
     */
    startAccelerometer: /*#__PURE__*/promisify(tt.startAccelerometer),
    stopAccelerometer: /*#__PURE__*/promisify(tt.stopAccelerometer),

    /**
     * mg
     * 剪贴板
     */
    setClipboardData: /*#__PURE__*/promisify(tt.setClipboardData),
    getClipboardData: /*#__PURE__*/promisify(tt.getClipboardData),

    /**
     * mg
     * 罗盘
     */
    startCompass: /*#__PURE__*/promisify(tt.startCompass),
    stopCompass: /*#__PURE__*/promisify(tt.stopCompass),

    /**
     * mg
     *网络
     */
    getNetworkType: /*#__PURE__*/promisify(tt.getNetworkType),

    /**
     * mg
     * 屏幕亮度
     *
    */
    setKeepScreenOn: /*#__PURE__*/promisify(tt.setKeepScreenOn),

    /**
     * mg
     * 振动
     */
    vibrateLong: /*#__PURE__*/promisify(tt.vibrateLong),
    vibrateShort: /*#__PURE__*/promisify(tt.vibrateShort),

    /**
     * mg
     * 电池
     */
    getBatteryInfo: /*#__PURE__*/promisify(tt.getBatteryInfo),

    /**
      * mg
      * 文件
      */
    getFileSystemManager: function () {
      var $ = tt.getFileSystemManager();

      var fsm = __assign(__assign({}, $), {
        access: promisify($.access.bind($)),
        copyFile: promisify($.copyFile.bind($)),
        getFileInfo: promisify($.getFileInfo.bind($)),
        getSavedFileList: promisify($.getSavedFileList.bind($)),
        mkdir: promisify($.mkdir.bind($)),
        readFile: promisify($.readFile.bind($)),
        readdir: promisify($.readdir.bind($)),
        removeSavedFile: promisify($.removeSavedFile.bind($)),
        rename: promisify($.rename.bind($)),
        rmdir: promisify($.rmdir.bind($)),
        saveFile: promisify($.saveFile.bind($)),
        unlink: promisify($.unlink.bind($)),
        unzip: promisify($.unzip.bind($)),
        writeFile: promisify($.writeFile.bind($)),
        stat: promisify($.stat.bind($))
      });

      Object.setPrototypeOf(fsm, $);
      return fsm;
    },

    /**mg
     * 位置
     */
    getLocation: /*#__PURE__*/promisify(tt.getLocation),

    /**
      *  图片 mg
      *
      */
    chooseImage: /*#__PURE__*/promisify(tt.chooseImage),
    saveImageToPhotosAlbum: /*#__PURE__*/promisify(tt.saveImageToPhotosAlbum),
    previewImage: /*#__PURE__*/promisify(tt.previewImage),
    getImageInfo: /*#__PURE__*/promisify(tt.getImageInfo),

    /**
     * mg
     * 录屏
     */
    getGameRecorderManager: function () {
      var $ = tt.getGameRecorderManager();

      var grm = __assign(__assign({}, $), {
        recordClip: promisify($.recordClip.bind($)),
        clipVideo: promisify($.clipVideo.bind($)) //

      });

      Object.setPrototypeOf(grm, $);
      return grm;
    },

    /**
     * mg
     * 下载
     *
     */
    downloadFile: /*#__PURE__*/promisify(tt.downloadFile),

    /**
     * 上传
     */
    uploadFile: /*#__PURE__*/promisify(tt.uploadFile),

    /**
     * 发起请求
     *
     */
    request: /*#__PURE__*/promisify(request),

    /**
     * 转发
     */
    showShareMenu: /*#__PURE__*/promisify(tt.showShareMenu),
    hideShareMenu: /*#__PURE__*/promisify(tt.hideShareMenu),
    navigateToVideoView: /*#__PURE__*/promisify(tt.navigateToVideoView),
    shareAppMessage: /*#__PURE__*/promisify(tt.shareAppMessage),

    /**
     *
     */
    shareVideo: /*#__PURE__*/promisify(tt.shareVideo),

    /**
     * 数据缓存
     */
    clearStorage: /*#__PURE__*/promisify(tt.clearStorage),

    /**
     * 当 key 取不到的时候, tt 默认走到 fail 里,
     * 使用 Promise 封装后会走到 error 里,
     * 在使用 async/await 的时候并不方便,
     * 因此在这里处理成当 key 不存在的时候返回 understand
     */
    getStorage: function (param) {
      return promisify(tt.getStorage)(param).then(function (res) {
        return res;
      }).catch(function () {
        return {
          errMsg: "getStorage:ok",
          data: undefined
        };
      });
    },
    setStorage: /*#__PURE__*/promisify(tt.setStorage),
    removeStorage: /*#__PURE__*/promisify(tt.removeStorage),
    getStorageInfo: /*#__PURE__*/promisify(tt.getStorageInfo),

    /**
     * 系统信息
     */
    getSystemInfo: /*#__PURE__*/promisify(tt.getSystemInfo),

    /**
     *
     * 交互
     */
    showToast: /*#__PURE__*/promisify(tt.showToast),
    hideToast: function (param) {
      if (param === void 0) {
        param = {};
      }

      return promisify(tt.hideToast)(param);
    },
    showLoading: /*#__PURE__*/promisify(tt.showLoading),
    hideLoading: function (param) {
      if (param === void 0) {
        param = {};
      }

      return promisify(tt.hideLoading)(param);
    },
    showModal: /*#__PURE__*/promisify(tt.showModal),
    showActionSheet: /*#__PURE__*/promisify(tt.showActionSheet),
    showFavoriteGuide: /*#__PURE__*/promisify(tt.showFavoriteGuide),

    /**
     * 键盘
     */
    showKeyboard: /*#__PURE__*/promisify(tt.showKeyboard),
    updateKeyboard: /*#__PURE__*/promisify(tt.updateKeyboard),
    hideKeyboard: function (param) {
      if (param === void 0) {
        param = {};
      }

      return promisify(tt.hideKeyboard)(param);
    },

    /**
     * 支付
     */
    requestGamePayment: /*#__PURE__*/promisify(tt.requestGamePayment),

    /**
     * mg
     * 开放能力
     * 登录
     */
    login: function (param) {
      if (param === void 0) {
        param = {};
      }

      return promisify(tt.login)(param);
    },
    checkSession: /*#__PURE__*/promisify(tt.checkSession),
    getUserInfo: function (param) {
      if (param === void 0) {
        param = {};
      }

      return promisify(tt.getUserInfo)(param);
    },

    /**
     * mg
     * 开放能力
     * 设置
     *
     */
    getSetting: function (param) {
      if (param === void 0) {
        param = {};
      }

      return promisify(tt.getSetting)(param);
    },
    openSetting: function (param) {
      if (param === void 0) {
        param = {};
      }

      return promisify(tt.openSetting)(param);
    },

    /**
     * mg
     * 开放能力
     * 授权
     *
     */
    authorize: /*#__PURE__*/promisify(tt.authorize),
    callHostMethod: function (param) {
      if (isH5) {
        return Promise.reject(new Error("H5 暂环境暂不支持 callHostMethod 方法"));
      } else {
        return promisify(tt.callHostMethod)(param);
      }
    },

    /**
     * mg
    * 开放能力
    * 关注
    */
    checkFollowState: function (param) {
      if (param === void 0) {
        param = {};
      }

      return promisify(tt.checkFollowState)(param);
    },

    /**
     * mg 开放能力
     * 更多游戏
     */
    showMoreGamesModal: /*#__PURE__*/promisify(tt.showMoreGamesModal),

    /**
     * mg开放能力
     * 开放数据
     */
    getCloudStorageByRelation: /*#__PURE__*/promisify(tt.getCloudStorageByRelation),
    setUserCloudStorage: /*#__PURE__*/promisify(tt.setUserCloudStorage),
    getUserCloudStorage: /*#__PURE__*/promisify(tt.getUserCloudStorage),
    removeUserCloudStorage: /*#__PURE__*/promisify(tt.removeUserCloudStorage),

    /**
     * mg 开放能力
     * 排行榜
     */
    setUserGroup: /*#__PURE__*/promisify(tt.setUserGroup),

    /**
     *
     * 小程序
     *
     */
    openLocation: /*#__PURE__*/promisify(tt.openLocation),
    getConnectedWifi: /*#__PURE__*/promisify(tt.getConnectedWifi),
    makePhoneCall: /*#__PURE__*/promisify(tt.makePhoneCall),
    scanCode: /*#__PURE__*/promisify(tt.scanCode),
    showNavigationBarLoading: /*#__PURE__*/promisify(tt.showNavigationBarLoading),
    hideNavigationBarLoading: /*#__PURE__*/promisify(tt.hideNavigationBarLoading),
    hideHomeButton: /*#__PURE__*/promisify(tt.hideHomeButton),
    setNavigationBarTitle: /*#__PURE__*/promisify(tt.setNavigationBarTitle),
    setNavigationBarColor: /*#__PURE__*/promisify(tt.setNavigationBarColor),
    getMenuButtonBoundingClientRect: /*#__PURE__*/promisify(tt.getMenuButtonBoundingClientRect),
    pageScrollTo: /*#__PURE__*/promisify(tt.pageScrollTo),
    startPullDownRefresh: /*#__PURE__*/promisify(tt.startPullDownRefresh),
    stopPullDownRefresh: /*#__PURE__*/promisify(tt.stopPullDownRefresh),
    showTabBarRedDot: /*#__PURE__*/promisify(tt.showTabBarRedDot),
    showTabBar: /*#__PURE__*/promisify(tt.showTabBar),
    setTabBarStyle: /*#__PURE__*/promisify(tt.setTabBarStyle),
    setTabBarItem: /*#__PURE__*/promisify(tt.setTabBarItem),
    setTabBarBadge: /*#__PURE__*/promisify(tt.setTabBarBadge),
    removeTabBarBadge: /*#__PURE__*/promisify(tt.removeTabBarBadge),
    hideTabBarRedDot: /*#__PURE__*/promisify(tt.hideTabBarRedDot),
    navigateTo: /*#__PURE__*/promisify(tt.navigateTo),
    redirectTo: /*#__PURE__*/promisify(tt.redirectTo),
    switchTab: /*#__PURE__*/promisify(tt.switchTab),
    navigateBack: /*#__PURE__*/promisify(tt.navigateBack),
    reLaunch: /*#__PURE__*/promisify(tt.reLaunch),
    getExtConfig: /*#__PURE__*/promisify(tt.getExtConfig),
    navigateBackMiniProgram: /*#__PURE__*/promisify(tt.navigateBackMiniProgram),
    chooseAddress: /*#__PURE__*/promisify(tt.chooseAddress),
    interactionAnalysis: /*#__PURE__*/promisify(tt.interactionAnalysis),
    followOfficialAccount: /*#__PURE__*/promisify(tt.followOfficialAccount)
  });
} else {
  stt = {};
}

var stt$1 = stt;

exports.default = stt$1;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
cc._RF.pop();
        }
        if (CC_EDITOR) {
            __define(__module.exports, __require, __module);
        }
        else {
            cc.registerModuleFunc(__filename, function () {
                __define(__module.exports, __require, __module);
            });
        }
        })();
        
        