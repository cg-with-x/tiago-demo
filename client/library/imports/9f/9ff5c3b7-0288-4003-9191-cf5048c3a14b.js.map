{"version":3,"sources":["../../../../assets/scripts/assets/scripts/start.js"],"names":["cc","Class","extends","Component","properties","labelNickName","Label","spriteAvatar","Sprite","nodeFeature","Node","nodeLoading","onLoad","dataManager","tiagoInited","active","tiago","init","appId","debug","onJoinTeam","team","then","console","log","catch","err","start","selfUserInfo","renderSelf","info","string","nickName","utils","renderAvatar","avatarUrl","onClickGetConfig","BUSINESS_SCENE","config","getConfig","currentScene","scene","LiveRoom","params","isNewcomer","Wonderland","onClickGetUserInfo","getUserInfo","onClickStartSingleMatch","match","startSingleMatch","on","result","director","loadScene","room","joinGameRoom","roomNum","joinRTCForGameRoom","roomManager","loadRoom","error","onClickStartSingleMatchAI","isAutoAppendAI","onClickMakeTeam","event","userData","split","size","ai","parseInt","currentTeam","makeTeam","teamSize","isAutoJoinRTC","type","MATCH_TYPE","Single","minPlayerCount","gameRoomScriptId","onClickRoom"],"mappings":"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","file":"start.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["import tiago from '@byted-creative/tiago';\nimport roomManager from './room_manager';\nimport dataManager from './data_manager';\nimport utils from './utils';\n\ncc.Class({\n    extends: cc.Component,        \n\n    properties: {\n        labelNickName: cc.Label,\n        spriteAvatar: cc.Sprite,\n        nodeFeature: cc.Node,\n        nodeLoading: cc.Node,\n    },\n\n    onLoad () {\n        if (!dataManager.tiagoInited) {\n            this.nodeFeature.active = false;\n            this.nodeLoading.active = true;\n\n            tiago.init({\n                appId: 'tt5e982825c1b2d9a3',\n                debug: true,\n                onJoinTeam: (team) => { this.onJoinTeam(team) }, // 2.0 的主要功能，组队，会在受邀加入队伍、或自己创建队伍后触发！\n            }).then(() => {\n                console.log('tiago init success.');\n                dataManager.tiagoInited = true;\n                dataManager.tiago = tiago;\n\n                this.nodeFeature.active = true;\n                this.nodeLoading.active = false;\n            }).catch(err => {\n                console.log(err);\n                // NOTE: 一般情况不会出错，我们会对错误情况做监控，游戏可以处理一些异常情况下的表现\n            });\n        } else {\n            this.nodeFeature.active = true;\n            this.nodeLoading.active = false;\n        }\n\n        console.log('loaded')\n    },\n\n    start () {\n        if (dataManager.selfUserInfo) {\n            this.renderSelf(dataManager.selfUserInfo);\n        }\n    },\n\n    renderSelf(info) {\n        this.labelNickName.string = info.nickName;\n        utils.renderAvatar(this.spriteAvatar, info.avatarUrl);\n    },\n\n    onClickGetConfig() {\n        const { BUSINESS_SCENE } = tiago;   \n\n        const config = tiago.getConfig();\n        console.log(config);\n\n        const { currentScene, scene } = config;\n\n        if (currentScene === BUSINESS_SCENE.LiveRoom) {\n            // 当前是直播场景\n            const params = scene[currentScene];\n\n            if (params.isNewcomer) {  \n                // NOTE: 补充新手逻辑\n                console.log('新手首次加入游戏');\n            }\n            \n            // NOTE: 针对直播场景，调整使用直播专用的 UI，或处理其他特殊逻辑\n        } else if (currentScene === BUSINESS_SCENE.Wonderland) {\n            // 当前是 W 场景\n        }\n    },\n\n    onClickGetUserInfo() {\n        const info = tiago.getUserInfo();\n        console.log(info);\n\n        // NOTE: 这里只是简单的保存下来\n        dataManager.selfUserInfo = info;\n        this.renderSelf(dataManager.selfUserInfo);\n    },\n\n    onClickStartSingleMatch() {\n        const match = tiago.startSingleMatch();\n\n        match.on('match-success', result => {\n            // 获得匹配成功后的用户信息\n            console.log(result);\n        });\n        \n        match.on('create-game-room-success', result => {\n            console.log(result);\n\n            // NOTE: 如果游戏场景比较复杂，可以预加载一下\n            // 可以先切换场景，然后连入游戏房间\n            cc.director.loadScene('game', () => {\n                // NOTE: 随后可以加入游戏房间\n                const room = tiago.joinGameRoom({\n                    roomNum: result.roomNum,\n                });\n                \n                // NOTE: 加入房间连麦\n                tiago.joinRTCForGameRoom(room);\n\n                // 交由 room_manager 进行管理\n                roomManager.loadRoom(room);\n            });\n        });\n        \n        match.on('error', error => {\n            console.log(error);\n        });\n    },\n\n    onClickStartSingleMatchAI() {\n        const match = tiago.startSingleMatch({\n            isAutoAppendAI: true, // 支持 AI 逻辑\n        });\n\n        match.on('match-success', result => {\n            // 获得匹配成功后的用户信息\n            console.log(result);\n        });\n        \n        match.on('create-game-room-success', result => {\n            console.log(result);\n\n            // NOTE: 如果游戏场景比较复杂，可以预加载一下\n            // 可以先切换场景，然后连入游戏房间\n            cc.director.loadScene('game', () => {\n                // NOTE: 随后可以加入游戏房间\n                const room = tiago.joinGameRoom({\n                    roomNum: result.roomNum,\n                });\n\n                // 交由 room_manager 进行管理\n                roomManager.loadRoom(room);\n            });\n        });\n        \n        match.on('error', error => {\n            console.log(error);\n        });\n    },\n\n    onClickMakeTeam(event, userData) {\n        // userData: '2', '2-ai', 符合这类格式\n        let [ size, ai ] = userData.split('-');\n        size = parseInt(size);\n        ai = !!ai;\n\n        console.log(size);\n        console.log(ai);\n\n        // NOTE: 创建新队伍前，先清理一下\n        dataManager.currentTeam = null;\n\n        // NOTE: 创建一个队伍，匹配时进行 Single 类型匹配\n        tiago.makeTeam({\n            teamSize: size,  // 2-9 人\n            isAutoJoinRTC: true, // 默认组队时进行连麦\n            match: {\n                type: tiago.MATCH_TYPE.Single, // SINGLE, NVN,\n                minPlayerCount: 1, // 1 个人就能玩\n                isAutoAppendAI: ai, // 配合 SINGLE，字段，默认不补充 AI，NVN 匹配时不支持 AI\n                gameRoomScriptId: 'room-283', // 房间服务适用、指定不同的游戏房间脚本 ID（注意不是脚本名称）、配合 IDE 上传房间脚本时使用\n                // disableAutoCreateGameRoom: true, // 默认自动创建游戏房间，可以关闭（生肖派对），关闭后，gameRoomScriptId 字段失效\n            },\n        });\n\n        // NOTE: 后续的逻辑，都会由 tiago init 时传入的 `onJoinTeam` 回调触发\n    },\n\n    onClickRoom() {\n        cc.director.loadScene('room');\n    },\n\n    onJoinTeam(team) {\n        // NOTE: 可以在适当的时机进行清理，例如：在每次 makeTeam 之前。\n        dataManager.currentTeam = team;\n\n        team.on('match-success', result => {\n            // 获得匹配成功后的用户信息\n            console.log(result);\n        });\n        \n        team.on('create-game-room-success', result => {\n            console.log(result);\n\n            // NOTE: 如果游戏场景比较复杂，可以预加载一下\n            // 可以先切换场景，然后连入游戏房间\n            cc.director.loadScene('multi-game', () => {\n                // NOTE: 随后可以加入游戏房间\n                const room = tiago.joinGameRoom({\n                    roomNum: result.roomNum,\n                });\n                \n                // NOTE: 加入房间连麦\n                tiago.joinRTCForGameRoom(room);\n\n                // 交由 room_manager 进行管理\n                roomManager.loadRoom(room);\n            });\n        });\n        \n        team.on('error', error => {\n            console.log(error);\n        });\n    }\n});"]}