{"version":3,"sources":["../../../../assets/scripts/assets/scripts/multi_game.js"],"names":["cc","Class","extends","Component","properties","chatRoot","Node","labelServerTime","Label","settlementRoot","labelResult","players","default","bestScorePlayer","bestScore","start","active","onClickStopGame","roomManager","room","send","JSON","stringify","event","showSettlement","onClickTalk","data","parseInt","Math","random","onClickReconnect","reconnect","onClickBack","director","loadScene","dataManager","tiago","leaveRTCFromGameRoom","leave","console","warn","isGameEnd","currentTeam","return","videoTempPath","gameRecorderManager","stop","onRoomMessage","messageStr","log","message","parse","length","forEach","environment","multiPlayersInfo","renderPlayers","string","renderTalk","recordBestScore","removeAllChildren","i","player","openId","label","addComponent","addChild","node","y","info","tip","self","getUserInfo","isMe","name","isAI","nickName","Number"],"mappings":"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","file":"multi_game.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["import roomManager from \"./room_manager\";\n\nimport utils from \"./utils\";\nimport dataManager from \"./data_manager\";\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    chatRoot: cc.Node,\n    labelServerTime: cc.Label,\n    settlementRoot: cc.Node,\n    labelResult: cc.Label,\n    players: {\n      default: {},\n    },\n    bestScorePlayer: {\n      default: \"\",\n    },\n    bestScore: {\n      default: 0,\n    },\n  },\n\n  start() {\n    this.settlementRoot.active = false;\n  },\n\n  onClickStopGame() {\n    roomManager.room.send(\n      JSON.stringify({\n        event: \"bye\",\n      })\n    );\n    this.showSettlement();\n  },\n\n  onClickTalk() {\n    if (roomManager.room) {\n      roomManager.room.send(\n        JSON.stringify({\n          event: \"talk\",\n          data: parseInt(Math.random() * 100),\n        })\n      );\n    }\n  },\n\n  onClickReconnect() {\n    if (roomManager.room) {\n      roomManager.room.reconnect();\n    }\n  },\n\n  onClickBack() {\n    cc.director.loadScene(\"start\");\n\n    // NOTE: 退出连麦\n    if (dataManager.tiago)\n      dataManager.tiago.leaveRTCFromGameRoom(roomManager.room);\n    roomManager.leave(); \n    console.warn(\"游戏结束\");\n    dataManager.isGameEnd = true;\n\n    // NOTE: 如果之前在一个组队中，则回到队伍\n    if (dataManager.currentTeam) dataManager.currentTeam.return();\n    if (dataManager.tiago && dataManager.videoTempPath && dataManager.isGameEnd) {\n      // dataManager.tiago\n      //   .uploadVideo(dataManager.videoTempPath, \"Hello Wonderland\")\n      //   .then(() => {\n          \n      //   })\n      //   .catch((e) => {\n          \n      //   });\n    }\n    if (dataManager.gameRecorderManager) {\n      dataManager.gameRecorderManager.stop();\n    }\n  },\n\n  onRoomMessage(messageStr) {\n    // NOTE: 消息体的内容是开发者自己定义的，这里的代码只是一种示例\n    // NOTE: 开发者可以根据自己的房间脚本和协议，实现自身游戏的逻辑\n    console.log(\"message received\", messageStr);\n    const message = JSON.parse(messageStr);\n\n    if (message.length) {\n      message.forEach(({ event, data }) => {\n        switch (event) {\n          case \"game-start\":\n            break;\n          case \"environment\":\n            dataManager.environment = data;\n            break;\n          case \"info\":\n            dataManager.multiPlayersInfo = data;\n            this.renderPlayers();\n            break;\n          case \"server-time\":\n            this.labelServerTime.string = `${dataManager.environment}: ${data}`;\n            break;\n          case \"talk\":\n            this.renderTalk(data);\n            this.recordBestScore(data);\n            break;\n          case \"game-over\":\n            this.showSettlement();\n            break;\n          default:\n            break;\n        }\n      });\n    }\n  },\n\n  renderPlayers() {\n    if (dataManager.multiPlayersInfo) {\n      const players = dataManager.multiPlayersInfo;\n\n      this.chatRoot.removeAllChildren();\n      this.players = [];\n\n      for (let i = 0; i < players.length; i++) {\n        const player = players[i];\n        const openId = player.openId;\n        const label = new cc.Node().addComponent(cc.Label);\n        this.chatRoot.addChild(label.node);\n        label.node.y = -i * 70;\n\n        this.players[openId] = {\n          openId,\n          info: player,\n          label,\n        };\n\n        this.renderTalk({ openId, data: \"\" });\n      }\n    }\n  },\n\n  renderTalk({ openId, data }) {\n    const tip = `战斗力 +${data}`;\n    const player = this.players[openId];\n    const self = dataManager.tiago.getUserInfo();\n\n    if (player && self) {\n      const isMe = player.openId === self.openId;\n      let name = player.info.isAI\n        ? `AI: ${player.info.nickName}`\n        : player.info.nickName;\n      if (isMe) name = `${name}(我)`;\n      player.label.string = `${name}: ${tip}`;\n    }\n  },\n\n  recordBestScore({ openId, data }) {\n    if (this.bestScore < Number(data)) {\n      this.bestScore = Number(data);\n      const player = this.players[openId];\n      if (player) {\n        this.bestScorePlayer = player.info.nickName;\n      }\n    }\n  },\n\n  showSettlement() {\n    this.settlementRoot.active = true;\n    if (this.bestScorePlayer) {\n      this.labelResult.string = `${this.bestScorePlayer}最高打出最高伤害: +${this.bestScore}`;\n    }\n  },\n\n  // update (dt) {},\n});\n"]}